{
    "sourceFile": "src/utils/humanize.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1748375232905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748375535060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,31 @@\n+// src/utils/humanizeReservationType.ts\r\n export function humanizeReservationType(raw: string): string {\r\n-  // ex: \"formation-room-2025-06-05-morning\"\r\n-  const parts = raw.split('-');\r\n-  const periodKey = parts.pop();      // \"morning\" ou \"afternoon\"\r\n-  parts.pop();                        // retire la date\r\n-  const base = parts.join(' ');      // \"formation room\" ou \"location bureau\"\r\n+  // on capture 3 groupes : \r\n+  // 1) le \"slug\" produit (ex: \"formation-room\")\r\n+  // 2) la date (qu’on ignore)\r\n+  // 3) le créneau (\"morning\"|\"afternoon\")\r\n+  const m = raw.match(/^(.+)-\\d{4}-\\d{2}-\\d{2}-(morning|afternoon)$/);\r\n+  if (!m) {\r\n+    // fallback basique : transforme tous les \"-\" en \" \"\r\n+    return raw.replace(/-/g, ' ');\r\n+  }\r\n+  const [_, slug, periodKey] = m;\r\n+\r\n+  // map slug → libellé FR (optionnel mais conseillé)\r\n+  const nameMap: Record<string,string> = {\r\n+    'formation-room': 'salle de formation',\r\n+    'location-bureau': 'bureau privé',\r\n+    'coworking-space': 'espace coworking',\r\n+    // ajoutez vos autres mappings ici…\r\n+  };\r\n+  const base = nameMap[slug] ?? slug.replace(/-/g, ' ');\r\n+\r\n+  // map créneau\r\n   const periodMap: Record<string,string> = {\r\n     morning:   'matin',\r\n     afternoon: 'après-midi',\r\n   };\r\n-  return `${base} ${periodMap[periodKey!] || periodKey}`;\r\n+  const period = periodMap[periodKey];\r\n+\r\n+  return `${base} ${period}`;\r\n }\r\n"
                },
                {
                    "date": 1748377041703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,11 @@\n   const [_, slug, periodKey] = m;\r\n \r\n   // map slug → libellé FR (optionnel mais conseillé)\r\n   const nameMap: Record<string,string> = {\r\n-    'formation-room': 'salle de formation',\r\n-    'location-bureau': 'bureau privé',\r\n-    'coworking-space': 'espace coworking',\r\n+    'formation-room': 'Salle de formation',\r\n+    'location-bureau': 'Location bureau',\r\n+    'coworking-space': 'Espace coworking',\r\n     // ajoutez vos autres mappings ici…\r\n   };\r\n   const base = nameMap[slug] ?? slug.replace(/-/g, ' ');\r\n \r\n"
                },
                {
                    "date": 1748377539229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n   const nameMap: Record<string,string> = {\r\n     'formation-room': 'Salle de formation',\r\n     'location-bureau': 'Location bureau',\r\n     'coworking-space': 'Espace coworking',\r\n+    'formation room journée': 'Salle formation journée',\r\n     // ajoutez vos autres mappings ici…\r\n   };\r\n   const base = nameMap[slug] ?? slug.replace(/-/g, ' ');\r\n \r\n"
                },
                {
                    "date": 1748378099662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+// src/utils/humanizeReservationType.ts\r\n+export function humanizeReservationType(raw: string): string {\r\n+  // 1) on essaie d’extraire slug + créneau (avec ou sans date intermédiaire)\r\n+  //    ex: \"formation-room-2025-06-07-morning\"\r\n+  //    ou  \"formation-room-journée\"\r\n+  const m = raw.match(\r\n+    /^(.+?)(?:-\\d{4}-\\d{2}-\\d{2})?-(morning|afternoon|journée(?: complète)?)$/\r\n+  );\r\n+  let slug: string, periodKey: string;\r\n+\r\n+  if (m) {\r\n+    [, slug, periodKey] = m;\r\n+  } else {\r\n+    // fallback total : tout en minuscules, remplace - par espace\r\n+    const parts = raw.split('-');\r\n+    periodKey = parts.pop() || '';\r\n+    slug      = parts.join('-');\r\n+  }\r\n+\r\n+  // 2) Map slug → FR\r\n+  const nameMap: Record<string, string> = {\r\n+    'formation-room':  'Salle de formation',\r\n+    'location-bureau': 'Location bureau',\r\n+    'coworking-space': 'Espace coworking',\r\n+    // … ajoutez les autres slugs…\r\n+  };\r\n+  const base = nameMap[slug] ?? slug.replace(/-/g, ' ');\r\n+\r\n+  // 3) Map créneau → FR\r\n+  const periodMap: Record<string, string> = {\r\n+    morning:         'matin',\r\n+    afternoon:       'après-midi',\r\n+    journée:         'journée',\r\n+    'journée complète': 'journée complète',\r\n+  };\r\n+  const period = periodMap[periodKey] ?? periodKey.replace(/-/g, ' ');\r\n+\r\n+  return `${base} ${period}`;\r\n+}\r\n"
                },
                {
                    "date": 1748378215419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,71 +1,45 @@\n // src/utils/humanizeReservationType.ts\r\n export function humanizeReservationType(raw: string): string {\r\n-  // 1) on essaie d’extraire slug + créneau (avec ou sans date intermédiaire)\r\n-  //    ex: \"formation-room-2025-06-07-morning\"\r\n-  //    ou  \"formation-room-journée\"\r\n-  const m = raw.match(\r\n-    /^(.+?)(?:-\\d{4}-\\d{2}-\\d{2})?-(morning|afternoon|journée(?: complète)?)$/\r\n-  );\r\n-  let slug: string, periodKey: string;\r\n+  // Liste des clés de créneaux possibles, ordre important (journée complète avant journée)\r\n+  const periodKeys = [\r\n+    'journée complète',\r\n+    'journée',\r\n+    'afternoon',\r\n+    'morning',\r\n+  ];\r\n \r\n-  if (m) {\r\n-    [, slug, periodKey] = m;\r\n-  } else {\r\n-    // fallback total : tout en minuscules, remplace - par espace\r\n-    const parts = raw.split('-');\r\n-    periodKey = parts.pop() || '';\r\n-    slug      = parts.join('-');\r\n-  }\r\n+  // On cherche la clé qui correspond à la fin de la chaîne \"raw\"\r\n+  for (const key of periodKeys) {\r\n+    if (raw.toLowerCase().endsWith(key)) {\r\n+      // Séparer le slug du créneau\r\n+      const baseRaw = raw.slice(0, raw.length - key.length).trim();\r\n+      // Si le slug se termine par un '-', on l'enlève\r\n+      const slug = baseRaw.endsWith('-')\r\n+        ? baseRaw.slice(0, baseRaw.length - 1)\r\n+        : baseRaw;\r\n \r\n-  // 2) Map slug → FR\r\n-  const nameMap: Record<string, string> = {\r\n-    'formation-room':  'Salle de formation',\r\n-    'location-bureau': 'Location bureau',\r\n-    'coworking-space': 'Espace coworking',\r\n-    // … ajoutez les autres slugs…\r\n-  };\r\n-  const base = nameMap[slug] ?? slug.replace(/-/g, ' ');\r\n+      // Map slug → libellé FR\r\n+      const nameMap: Record<string, string> = {\r\n+        'formation-room': 'Salle de formation',\r\n+        'location-bureau': 'Location bureau',\r\n+        'coworking-space': 'Espace coworking',\r\n+        // Ajoutez vos autres mappings de slug ici\r\n+      };\r\n+      const base = nameMap[slug] ?? slug.replace(/-/g, ' ');\r\n \r\n-  // 3) Map créneau → FR\r\n-  const periodMap: Record<string, string> = {\r\n-    morning:         'matin',\r\n-    afternoon:       'après-midi',\r\n-    journée:         'journée',\r\n-    'journée complète': 'journée complète',\r\n-  };\r\n-  const period = periodMap[periodKey] ?? periodKey.replace(/-/g, ' ');\r\n+      // Map créneau → FR\r\n+      const periodMap: Record<string, string> = {\r\n+        morning: 'matin',\r\n+        afternoon: 'après-midi',\r\n+        journée: 'journée',\r\n+        'journée complète': 'journée complète',\r\n+      };\r\n+      const period = periodMap[key] ?? key;\r\n \r\n-  return `${base} ${period}`;\r\n-}\r\n-// src/utils/humanizeReservationType.ts\r\n-export function humanizeReservationType(raw: string): string {\r\n-  // on capture 3 groupes : \r\n-  // 1) le \"slug\" produit (ex: \"formation-room\")\r\n-  // 2) la date (qu’on ignore)\r\n-  // 3) le créneau (\"morning\"|\"afternoon\")\r\n-  const m = raw.match(/^(.+)-\\d{4}-\\d{2}-\\d{2}-(morning|afternoon)$/);\r\n-  if (!m) {\r\n-    // fallback basique : transforme tous les \"-\" en \" \"\r\n-    return raw.replace(/-/g, ' ');\r\n+      return `${base} ${period}`;\r\n+    }\r\n   }\r\n-  const [_, slug, periodKey] = m;\r\n \r\n-  // map slug → libellé FR (optionnel mais conseillé)\r\n-  const nameMap: Record<string,string> = {\r\n-    'formation-room': 'Salle de formation',\r\n-    'location-bureau': 'Location bureau',\r\n-    'coworking-space': 'Espace coworking',\r\n-    'formation room journée': 'Salle formation journée',\r\n-    // ajoutez vos autres mappings ici…\r\n-  };\r\n-  const base = nameMap[slug] ?? slug.replace(/-/g, ' ');\r\n-\r\n-  // map créneau\r\n-  const periodMap: Record<string,string> = {\r\n-    morning:   'matin',\r\n-    afternoon: 'après-midi',\r\n-  };\r\n-  const period = periodMap[periodKey];\r\n-\r\n-  return `${base} ${period}`;\r\n+  // Fallback : remplacer tous les '-' par un espace\r\n+  return raw.replace(/-/g, ' ');\r\n }\r\n"
                },
                {
                    "date": 1748378339167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +1,38 @@\n // src/utils/humanizeReservationType.ts\r\n export function humanizeReservationType(raw: string): string {\r\n-  // Liste des clés de créneaux possibles, ordre important (journée complète avant journée)\r\n-  const periodKeys = [\r\n-    'journée complète',\r\n-    'journée',\r\n-    'afternoon',\r\n-    'morning',\r\n-  ];\r\n+  // Normalise la chaîne : remplace '-' par ' ' et condense les espaces\r\n+  const normalized = raw.replace(/-/g, ' ').replace(/\\s+/g, ' ').trim();\r\n \r\n-  // On cherche la clé qui correspond à la fin de la chaîne \"raw\"\r\n-  for (const key of periodKeys) {\r\n-    if (raw.toLowerCase().endsWith(key)) {\r\n-      // Séparer le slug du créneau\r\n-      const baseRaw = raw.slice(0, raw.length - key.length).trim();\r\n-      // Si le slug se termine par un '-', on l'enlève\r\n-      const slug = baseRaw.endsWith('-')\r\n-        ? baseRaw.slice(0, baseRaw.length - 1)\r\n-        : baseRaw;\r\n+  // Essaie de capturer : slug (texte avant la date), date et créneau (EN ou FR)\r\n+  const match = normalized.match(/^(.+?)\\s+\\d{4}\\s+\\d{2}\\s+\\d{2}\\s+(matin|après-midi|morning|afternoon)$/i);\r\n+  if (match) {\r\n+    let [, slugPart, periodKey] = match;\r\n+    slugPart = slugPart.trim();\r\n \r\n-      // Map slug → libellé FR\r\n-      const nameMap: Record<string, string> = {\r\n-        'formation-room': 'Salle de formation',\r\n-        'location-bureau': 'Location bureau',\r\n-        'coworking-space': 'Espace coworking',\r\n-        // Ajoutez vos autres mappings de slug ici\r\n-      };\r\n-      const base = nameMap[slug] ?? slug.replace(/-/g, ' ');\r\n+    // Map slug → clé standard (avec '-')\r\n+    const slugKey = slugPart.toLowerCase().replace(/\\s+/g, '-');\r\n \r\n-      // Map créneau → FR\r\n-      const periodMap: Record<string, string> = {\r\n-        morning: 'matin',\r\n-        afternoon: 'après-midi',\r\n-        journée: 'journée',\r\n-        'journée complète': 'journée complète',\r\n-      };\r\n-      const period = periodMap[key] ?? key;\r\n+    // Map slugKey → libellé FR\r\n+    const nameMap: Record<string, string> = {\r\n+      'formation-room': 'Salle de formation',\r\n+      'location-bureau': 'Location bureau',\r\n+      'coworking-space': 'Espace coworking',\r\n+      // ajoutez vos autres mappings ici\r\n+    };\r\n+    const base = nameMap[slugKey] ?? slugPart;\r\n \r\n-      return `${base} ${period}`;\r\n-    }\r\n+    // Map créneau (EN/FR) → FR\r\n+    const periodMap: Record<string, string> = {\r\n+      morning: 'matin',\r\n+      afternoon: 'après-midi',\r\n+      matin: 'matin',\r\n+      'après-midi': 'après-midi',\r\n+    };\r\n+    const period = periodMap[periodKey.toLowerCase()] ?? periodKey;\r\n+\r\n+    return `${base} ${period}`;\r\n   }\r\n \r\n-  // Fallback : remplacer tous les '-' par un espace\r\n-  return raw.replace(/-/g, ' ');\r\n+  // Fallback : on retourne la version normalisée\r\n+  return normalized;\r\n }\r\n"
                },
                {
                    "date": 1748378491370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,27 +2,35 @@\n export function humanizeReservationType(raw: string): string {\r\n   // Normalise la chaîne : remplace '-' par ' ' et condense les espaces\r\n   const normalized = raw.replace(/-/g, ' ').replace(/\\s+/g, ' ').trim();\r\n \r\n-  // Essaie de capturer : slug (texte avant la date), date et créneau (EN ou FR)\r\n-  const match = normalized.match(/^(.+?)\\s+\\d{4}\\s+\\d{2}\\s+\\d{2}\\s+(matin|après-midi|morning|afternoon)$/i);\r\n+  /*\r\n+   * Tente de capturer :\r\n+   * - slug (texte avant la date)\r\n+   * - date au format YYYY MM DD\r\n+   * - créneau (EN ou FR)\r\n+   */\r\n+  const match = normalized.match(\r\n+    /^(.+?)\\s+\\d{4}\\s+\\d{2}\\s+\\d{2}\\s+(matin|après-midi|morning|afternoon)$/i\r\n+  );\r\n+\r\n   if (match) {\r\n     let [, slugPart, periodKey] = match;\r\n     slugPart = slugPart.trim();\r\n \r\n-    // Map slug → clé standard (avec '-')\r\n+    // Convertit le slug (avec espaces) en clé standard (avec '-')\r\n     const slugKey = slugPart.toLowerCase().replace(/\\s+/g, '-');\r\n \r\n-    // Map slugKey → libellé FR\r\n+    // Mapping des slugs vers leurs libellés FR\r\n     const nameMap: Record<string, string> = {\r\n       'formation-room': 'Salle de formation',\r\n       'location-bureau': 'Location bureau',\r\n       'coworking-space': 'Espace coworking',\r\n-      // ajoutez vos autres mappings ici\r\n+      // Ajoutez ici d'autres mappings si nécessaire\r\n     };\r\n     const base = nameMap[slugKey] ?? slugPart;\r\n \r\n-    // Map créneau (EN/FR) → FR\r\n+    // Mapping des créneaux (EN/FR) vers FR\r\n     const periodMap: Record<string, string> = {\r\n       morning: 'matin',\r\n       afternoon: 'après-midi',\r\n       matin: 'matin',\r\n@@ -32,7 +40,7 @@\n \r\n     return `${base} ${period}`;\r\n   }\r\n \r\n-  // Fallback : on retourne la version normalisée\r\n+  // Si pas de date/créneau, retourne la chaîne normalisée\r\n   return normalized;\r\n }\r\n"
                },
                {
                    "date": 1748378591628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,62 @@\n // src/utils/humanizeReservationType.ts\r\n export function humanizeReservationType(raw: string): string {\r\n-  // Normalise la chaîne : remplace '-' par ' ' et condense les espaces\r\n+  // 1) Normalise la chaîne : remplace '-' par ' ' et condense les espaces\r\n   const normalized = raw.replace(/-/g, ' ').replace(/\\s+/g, ' ').trim();\r\n \r\n-  /*\r\n-   * Tente de capturer :\r\n-   * - slug (texte avant la date)\r\n-   * - date au format YYYY MM DD\r\n-   * - créneau (EN ou FR)\r\n-   */\r\n-  const match = normalized.match(\r\n+  // 2) Cas avec date (YYYY MM DD + créneau EN/FR)\r\n+  const dateMatch = normalized.match(\r\n     /^(.+?)\\s+\\d{4}\\s+\\d{2}\\s+\\d{2}\\s+(matin|après-midi|morning|afternoon)$/i\r\n   );\r\n-\r\n-  if (match) {\r\n-    let [, slugPart, periodKey] = match;\r\n+  if (dateMatch) {\r\n+    let [, slugPart, periodKey] = dateMatch;\r\n     slugPart = slugPart.trim();\r\n-\r\n-    // Convertit le slug (avec espaces) en clé standard (avec '-')\r\n     const slugKey = slugPart.toLowerCase().replace(/\\s+/g, '-');\r\n \r\n-    // Mapping des slugs vers leurs libellés FR\r\n     const nameMap: Record<string, string> = {\r\n       'formation-room': 'Salle de formation',\r\n       'location-bureau': 'Location bureau',\r\n       'coworking-space': 'Espace coworking',\r\n-      // Ajoutez ici d'autres mappings si nécessaire\r\n+      // autres mappings...\r\n     };\r\n     const base = nameMap[slugKey] ?? slugPart;\r\n \r\n-    // Mapping des créneaux (EN/FR) vers FR\r\n     const periodMap: Record<string, string> = {\r\n       morning: 'matin',\r\n       afternoon: 'après-midi',\r\n       matin: 'matin',\r\n       'après-midi': 'après-midi',\r\n     };\r\n     const period = periodMap[periodKey.toLowerCase()] ?? periodKey;\r\n+    return `${base} ${period}`;\r\n+  }\r\n \r\n+  // 3) Cas sans date, juste slug + créneau FR\r\n+  const simpleMatch = normalized.match(\r\n+    /^(.+?)\\s+(matin|après-midi|journée|journée complète)$/i\r\n+  );\r\n+  if (simpleMatch) {\r\n+    let [, slugPart, periodKey] = simpleMatch;\r\n+    slugPart = slugPart.trim();\r\n+\r\n+    const slugKey = slugPart.toLowerCase().replace(/\\s+/g, '-');\r\n+    const nameMap: Record<string, string> = {\r\n+      'formation-room': 'Salle de formation',\r\n+      'location-bureau': 'Location bureau',\r\n+      'coworking-space': 'Espace coworking',\r\n+      // autres mappings...\r\n+    };\r\n+    const base = nameMap[slugKey] ?? slugPart;\r\n+\r\n+    const periodMap: Record<string, string> = {\r\n+      matin: 'matin',\r\n+      'après-midi': 'après-midi',\r\n+      journée: 'journée',\r\n+      'journée complète': 'journée complète',\r\n+    };\r\n+    const period = periodMap[periodKey.toLowerCase()] ?? periodKey;\r\n     return `${base} ${period}`;\r\n   }\r\n \r\n-  // Si pas de date/créneau, retourne la chaîne normalisée\r\n+  // Fallback : retourne la version normalisée\r\n   return normalized;\r\n }\r\n"
                }
            ],
            "date": 1748375232905,
            "name": "Commit-0",
            "content": "export function humanizeReservationType(raw: string): string {\r\n  // ex: \"formation-room-2025-06-05-morning\"\r\n  const parts = raw.split('-');\r\n  const periodKey = parts.pop();      // \"morning\" ou \"afternoon\"\r\n  parts.pop();                        // retire la date\r\n  const base = parts.join(' ');      // \"formation room\" ou \"location bureau\"\r\n  const periodMap: Record<string,string> = {\r\n    morning:   'matin',\r\n    afternoon: 'après-midi',\r\n  };\r\n  return `${base} ${periodMap[periodKey!] || periodKey}`;\r\n}\r\n"
        }
    ]
}