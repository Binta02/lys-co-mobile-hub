{
    "sourceFile": "src/pages/Checkout.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748369608421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748371865634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Label } from \"@/components/ui/label\";\r\n import { useCart } from \"@/components/cart/CartContext\";\r\n-\r\n+import { toast } from \"sonner\";\r\n // Ajout du type CartItem avec la propriété optionnelle 'period'\r\n type CartItem = {\r\n   id: string;\r\n   title: string;\r\n@@ -145,236 +145,458 @@\n     if (id === \"location-bureau\") return \"bureau\";\r\n     return id;\r\n   };\r\n \r\n+  // const handleSubmit = async (data: FormValues) => {\r\n+  //   setIsProcessing(true);\r\n+  //   if (!stripe || !elements) return;\r\n+\r\n+  //   console.log(\"Début de handleSubmit\");\r\n+\r\n+  //   const card = elements.getElement(CardElement);\r\n+  //   if (!card) return;\r\n+\r\n+  //   const oneTimeItems = items\r\n+  //     .filter((item) => !subscriptionProductIds.includes(item.id))\r\n+  //     .map((item) => ({\r\n+  //       amount: Math.round(item.price * 100),\r\n+  //       quantity: item.quantity,\r\n+  //     }));\r\n+\r\n+  //   const subscriptionItems = items\r\n+  //     .filter((item) => subscriptionProductIds.includes(item.id))\r\n+  //     .map((item) => {\r\n+  //       const priceId = getPriceIdFromProductId(item.id);\r\n+  //       if (!priceId) throw new Error(`Price ID manquant pour ${item.id}`);\r\n+  //       return { price: priceId, quantity: item.quantity };\r\n+  //     });\r\n+\r\n+  //   try {\r\n+  //     const { error: paymentError, paymentMethod } =\r\n+  //       await stripe.createPaymentMethod({\r\n+  //         type: \"card\",\r\n+  //         card,\r\n+  //         billing_details: {\r\n+  //           email: data.email,\r\n+  //           name: `${data.firstName} ${data.lastName}`,\r\n+  //         },\r\n+  //       });\r\n+\r\n+  //     if (paymentError || !paymentMethod) {\r\n+  //       console.error(paymentError);\r\n+  //       setIsProcessing(false);\r\n+  //       return;\r\n+  //     }\r\n+\r\n+  //     console.log(\"Payment method créé:\", paymentMethod);\r\n+\r\n+  //     const response = await fetch(\r\n+  //       \"https://mon-backend-node.vercel.app/api/create-payment-intent\",\r\n+  //       {\r\n+  //         method: \"POST\",\r\n+  //         headers: { \"Content-Type\": \"application/json\" },\r\n+  //         body: JSON.stringify({\r\n+  //           email: data.email,\r\n+  //           paymentMethodId: paymentMethod.id,\r\n+  //           oneTimeItems,\r\n+  //           subscriptionItems,\r\n+  //           userId,\r\n+  //           clientInfo: {\r\n+  //             firstName: data.firstName,\r\n+  //             lastName: data.lastName,\r\n+  //             address: data.address,\r\n+  //             siretNumber: data.siretNumber,\r\n+  //           },\r\n+  //           items, // ← ton tableau d’objets { title, price, quantity }\r\n+  //           total,\r\n+  //         }),\r\n+  //       }\r\n+  //     );\r\n+\r\n+  //     const {\r\n+  //       oneTimePaymentIntentClientSecret,\r\n+  //       oneTimePaymentIntentId,\r\n+  //       subscriptionClientSecret,\r\n+  //       subscriptionPaymentIntentId,\r\n+  //     } = await response.json();\r\n+\r\n+  //     if (!response.ok) throw new Error(\"Erreur du backend\");\r\n+\r\n+  //     console.log(\"Client secrets:\", {\r\n+  //       oneTimePaymentIntentClientSecret,\r\n+  //       subscriptionClientSecret,\r\n+  //     });\r\n+\r\n+  //     if (oneTimePaymentIntentClientSecret) {\r\n+  //       const { error: confirmError } = await stripe.confirmCardPayment(\r\n+  //         oneTimePaymentIntentClientSecret,\r\n+  //         {\r\n+  //           payment_method: paymentMethod.id,\r\n+  //           receipt_email: data.email,\r\n+  //         }\r\n+  //       );\r\n+  //       if (confirmError) throw new Error(\"Échec du paiement unique\");\r\n+  //     }\r\n+\r\n+  //     if (subscriptionClientSecret) {\r\n+  //       const { error: confirmError } = await stripe.confirmCardPayment(\r\n+  //         subscriptionClientSecret\r\n+  //       );\r\n+  //       if (confirmError) throw new Error(\"Échec de paiement de l'abonnement\");\r\n+  //     }\r\n+\r\n+  //     for (const item of items) {\r\n+  //       const baseInsert = {\r\n+  //         user_id: userId!,\r\n+  //         name: item.title,\r\n+  //         price: item.price,\r\n+  //         status: \"active\",\r\n+  //       };\r\n+\r\n+  //       console.log(\"Traitement item:\", item);\r\n+  //       if (item.id.includes(\"domiciliation\")) {\r\n+  //         const duration = item.title.includes(\"1 an\")\r\n+  //           ? \"12mois\"\r\n+  //           : item.title.includes(\"6 mois\")\r\n+  //           ? \"6mois\"\r\n+  //           : item.title.includes(\"3 mois\")\r\n+  //           ? \"3mois\"\r\n+  //           : null;\r\n+\r\n+  //         const plan_type = item.title.includes(\"micro\")\r\n+  //           ? \"micro\"\r\n+  //           : item.title.includes(\"entreprise\")\r\n+  //           ? \"entreprise\"\r\n+  //           : item.title.includes(\"association\")\r\n+  //           ? \"association\"\r\n+  //           : null;\r\n+\r\n+  //         const insertData = {\r\n+  //           user_id: userId!,\r\n+  //           address: data.address,\r\n+  //           duration, // string | null\r\n+  //           plan_type, // string | null\r\n+  //           status: \"active\", // si tu veux stocker un statut\r\n+  //           // renewal_date: … si tu veux gérer la date de renouvellement\r\n+  //         };\r\n+\r\n+  //         console.log(\"Insertion domiciliation:\", insertData);\r\n+  //         const { error } = await supabase\r\n+  //           .from(\"user_domiciliations\")\r\n+  //           .insert(insertData);\r\n+\r\n+  //         if (error) console.error(\"Erreur ajout domiciliation:\", error);\r\n+  //       } else if (\r\n+  //         item.id.includes(\"location-bureau\") ||\r\n+  //         item.id.includes(\"formation-room\") ||\r\n+  //         item.id.includes(\"coworking-space\")\r\n+  //       ) {\r\n+  //         const dateMatch = item.id.match(/\\d{4}-\\d{2}-\\d{2}/);\r\n+  //         const date = dateMatch ? dateMatch[0] : null;\r\n+\r\n+  //         // Utilise la période exacte du panier si elle existe\r\n+  //         // On tente d'utiliser la propriété period si elle existe, sinon on la calcule à partir du titre\r\n+  //         let period = (item as any).period;\r\n+  //         if (!period) {\r\n+  //           // Extraction des horaires depuis le titre (ex: \"Salle de formation — halfDay (morning) — 2025-05-28 \")\r\n+  //           const timeMatches = item.title.match(/\\d{2}:\\d{2}/g);\r\n+  //           let start = \"09:00\",\r\n+  //             end = \"16:00\";\r\n+\r\n+  //           if (timeMatches?.length === 1) {\r\n+  //             start = timeMatches[0];\r\n+  //             end =\r\n+  //               String(Number(start.split(\":\")[0]) + 1).padStart(2, \"0\") +\r\n+  //               \":00\";\r\n+  //           } else if (timeMatches?.length > 1) {\r\n+  //             start = timeMatches[0];\r\n+  //             end = timeMatches[timeMatches.length - 1];\r\n+  //             end =\r\n+  //               String(Number(end.split(\":\")[0]) + 1).padStart(2, \"0\") + \":00\";\r\n+  //           } else if (item.title.includes(\"morning\")) {\r\n+  //             start = \"09:00\";\r\n+  //             end = \"12:00\";\r\n+  //           } else if (item.title.includes(\"afternoon\")) {\r\n+  //             start = \"13:00\";\r\n+  //             end = \"16:00\";\r\n+  //           }\r\n+\r\n+  //           if (date) {\r\n+  //             const startISO = `${date}T${start}:00+00:00`;\r\n+  //             const endISO = `${date}T${end}:00+00:00`;\r\n+  //             period = `[${startISO},${endISO})`;\r\n+  //           }\r\n+  //         }\r\n+\r\n+  //         if (date && period) {\r\n+  //           const reservationType = getReservationType(item.id);\r\n+\r\n+  //           const insertData = {\r\n+  //             user_id: userId!,\r\n+  //             reservation_type: reservationType,\r\n+  //             reservation_date: date,\r\n+  //             price: item.price,\r\n+  //             period,\r\n+  //             payment_intent_id: oneTimePaymentIntentId,\r\n+  //           };\r\n+  //           console.log(\"Insertion réservation:\", insertData);\r\n+\r\n+  //           const { error } = await supabase\r\n+  //             .from(\"reservations\")\r\n+  //             .insert(insertData);\r\n+  //           if (error) console.error(\"Erreur ajout réservation:\", error);\r\n+  //         } else {\r\n+  //           console.error(\"Date ou période non extraite depuis item:\", item);\r\n+  //         }\r\n+  //         // ...existing code...\r\n+  //         // ...existing code...\r\n+  //       } else {\r\n+  //         const insertData = {\r\n+  //           ...baseInsert,\r\n+  //           category: \"commande\",\r\n+  //         };\r\n+  //         console.log(\"Insertion service:\", insertData);\r\n+  //         const { error } = await supabase\r\n+  //           .from(\"user_services\")\r\n+  //           .insert(insertData);\r\n+  //         if (error) console.error(\"Erreur ajout service:\", error);\r\n+  //       }\r\n+  //     }\r\n+  //     clearCart();\r\n+  //     navigate(\"/confirmation\", {\r\n+  //       state: {\r\n+  //         order: { items, subtotal, tax, total, clientInfo: data },\r\n+  //       },\r\n+  //     });\r\n+  //   } catch (err) {\r\n+  //     console.error(\"Erreur dans handleSubmit:\", err);\r\n+  //   } finally {\r\n+  //     setIsProcessing(false);\r\n+  //   }\r\n+  // };\r\n+\r\n   const handleSubmit = async (data: FormValues) => {\r\n-    setIsProcessing(true);\r\n-    if (!stripe || !elements) return;\r\n+  setIsProcessing(true);\r\n+  if (!stripe || !elements) return;\r\n \r\n+  try {\r\n     console.log(\"Début de handleSubmit\");\r\n \r\n+    // 1️⃣ Créer la PaymentMethod Stripe\r\n     const card = elements.getElement(CardElement);\r\n-    if (!card) return;\r\n+    if (!card) {\r\n+      console.error(\"CardElement introuvable\");\r\n+      return;\r\n+    }\r\n+    const { error: pmError, paymentMethod } = await stripe.createPaymentMethod({\r\n+      type: \"card\",\r\n+      card,\r\n+      billing_details: {\r\n+        email: data.email,\r\n+        name: `${data.firstName} ${data.lastName}`,\r\n+      },\r\n+    });\r\n+    if (pmError || !paymentMethod) {\r\n+      console.error(\"Erreur création PaymentMethod :\", pmError);\r\n+      return;\r\n+    }\r\n+    console.log(\"PaymentMethod créé :\", paymentMethod.id);\r\n \r\n+    // 2️⃣ Préparer les items pour le backend\r\n     const oneTimeItems = items\r\n-      .filter((item) => !subscriptionProductIds.includes(item.id))\r\n-      .map((item) => ({\r\n+      .map((item, index) => ({\r\n         amount: Math.round(item.price * 100),\r\n         quantity: item.quantity,\r\n-      }));\r\n+        index,\r\n+      }))\r\n+      .filter(i => !subscriptionProductIds.includes(items[i.index].id));\r\n \r\n     const subscriptionItems = items\r\n-      .filter((item) => subscriptionProductIds.includes(item.id))\r\n-      .map((item) => {\r\n-        const priceId = getPriceIdFromProductId(item.id);\r\n-        if (!priceId) throw new Error(`Price ID manquant pour ${item.id}`);\r\n-        return { price: priceId, quantity: item.quantity };\r\n-      });\r\n+      .map((item, index) => ({\r\n+        price: getPriceIdFromProductId(item.id)!,\r\n+        quantity: item.quantity,\r\n+      }))\r\n+      .filter((_, idx) => subscriptionProductIds.includes(items[idx].id));\r\n \r\n-    try {\r\n-      const { error: paymentError, paymentMethod } =\r\n-        await stripe.createPaymentMethod({\r\n-          type: \"card\",\r\n-          card,\r\n-          billing_details: {\r\n-            email: data.email,\r\n-            name: `${data.firstName} ${data.lastName}`,\r\n+    // 3️⃣ Appel au backend\r\n+    const resp = await fetch(\r\n+      \"https://mon-backend-node.vercel.app/api/create-payment-intent\",\r\n+      {\r\n+        method: \"POST\",\r\n+        headers: { \"Content-Type\": \"application/json\" },\r\n+        body: JSON.stringify({\r\n+          email: data.email,\r\n+          paymentMethodId: paymentMethod.id,\r\n+          userId,\r\n+          oneTimeItems,\r\n+          subscriptionItems,\r\n+          items,\r\n+          total,\r\n+          clientInfo: {\r\n+            firstName: data.firstName,\r\n+            lastName: data.lastName,\r\n+            address: data.address,\r\n+            siretNumber: data.siretNumber,\r\n           },\r\n-        });\r\n-\r\n-      if (paymentError || !paymentMethod) {\r\n-        console.error(paymentError);\r\n-        setIsProcessing(false);\r\n-        return;\r\n+        }),\r\n       }\r\n+    );\r\n+    if (!resp.ok) {\r\n+      const text = await resp.text();\r\n+      throw new Error(\"Backend error: \" + text);\r\n+    }\r\n \r\n-      console.log(\"Payment method créé:\", paymentMethod);\r\n+    type BackendResult = {\r\n+      oneTimePaymentIntents: Array<{\r\n+        index: number;\r\n+        id: string;\r\n+        clientSecret: string;\r\n+      }>;\r\n+      subscriptionClientSecret?: string;\r\n+      subscriptionPaymentIntentId?: string;\r\n+    };\r\n \r\n-      const response = await fetch(\r\n-        \"https://mon-backend-node.vercel.app/api/create-payment-intent\",\r\n+    const {\r\n+      oneTimePaymentIntents,\r\n+      subscriptionClientSecret,\r\n+      subscriptionPaymentIntentId,\r\n+    } = (await resp.json()) as BackendResult;\r\n+\r\n+    console.log(\"oneTimePaymentIntents :\", oneTimePaymentIntents);\r\n+\r\n+    // 4️⃣ Confirmer chaque paiement one-time\r\n+    for (const { clientSecret, index } of oneTimePaymentIntents) {\r\n+      const { error: confirmErr } = await stripe.confirmCardPayment(\r\n+        clientSecret,\r\n         {\r\n-          method: \"POST\",\r\n-          headers: { \"Content-Type\": \"application/json\" },\r\n-          body: JSON.stringify({\r\n-            email: data.email,\r\n-            paymentMethodId: paymentMethod.id,\r\n-            oneTimeItems,\r\n-            subscriptionItems,\r\n-            userId,\r\n-            clientInfo: {\r\n-              firstName: data.firstName,\r\n-              lastName: data.lastName,\r\n-              address: data.address,\r\n-              siretNumber: data.siretNumber,\r\n-            },\r\n-            items, // ← ton tableau d’objets { title, price, quantity }\r\n-            total,\r\n-          }),\r\n+          payment_method: paymentMethod.id,\r\n+          receipt_email: data.email,\r\n         }\r\n       );\r\n-\r\n-      const {\r\n-        oneTimePaymentIntentClientSecret,\r\n-        oneTimePaymentIntentId,\r\n-        subscriptionClientSecret,\r\n-        subscriptionPaymentIntentId,\r\n-      } = await response.json();\r\n-\r\n-      if (!response.ok) throw new Error(\"Erreur du backend\");\r\n-\r\n-      console.log(\"Client secrets:\", {\r\n-        oneTimePaymentIntentClientSecret,\r\n-        subscriptionClientSecret,\r\n-      });\r\n-\r\n-      if (oneTimePaymentIntentClientSecret) {\r\n-        const { error: confirmError } = await stripe.confirmCardPayment(\r\n-          oneTimePaymentIntentClientSecret,\r\n-          {\r\n-            payment_method: paymentMethod.id,\r\n-            receipt_email: data.email,\r\n-          }\r\n-        );\r\n-        if (confirmError) throw new Error(\"Échec du paiement unique\");\r\n+      if (confirmErr) {\r\n+        console.error(`Échec paiement item #${index}:`, confirmErr);\r\n+        throw new Error(\"Échec paiement one-time\");\r\n       }\r\n+    }\r\n \r\n-      if (subscriptionClientSecret) {\r\n-        const { error: confirmError } = await stripe.confirmCardPayment(\r\n-          subscriptionClientSecret\r\n-        );\r\n-        if (confirmError) throw new Error(\"Échec de paiement de l'abonnement\");\r\n+    // 5️⃣ Confirmer l’abonnement\r\n+    if (subscriptionClientSecret) {\r\n+      const { error: subErr } = await stripe.confirmCardPayment(\r\n+        subscriptionClientSecret\r\n+      );\r\n+      if (subErr) {\r\n+        console.error(\"Échec paiement abonnement:\", subErr);\r\n+        throw new Error(\"Échec paiement abonnement\");\r\n       }\r\n+    }\r\n \r\n-      for (const item of items) {\r\n-        const baseInsert = {\r\n-          user_id: userId!,\r\n-          name: item.title,\r\n-          price: item.price,\r\n-          status: \"active\",\r\n-        };\r\n+    // 6️⃣ Insertion en base pour chaque item\r\n+    await Promise.all(\r\n+      items.map(async (item, idx) => {\r\n+        // Réservation de salle\r\n+        if (/(location-bureau|formation-room|coworking-space)/.test(item.id)) {\r\n+          const date = item.id.match(/\\d{4}-\\d{2}-\\d{2}/)?.[0];\r\n+          if (!date) {\r\n+            console.error(\"Date non extraite pour :\", item);\r\n+            return;\r\n+          }\r\n+          // calcul de la période (ton parsing existant)\r\n+          let period = (item as any).period;\r\n+          if (!period) {\r\n+            const times = item.title.match(/\\d{2}:\\d{2}/g) || [];\r\n+            let start = \"09:00\", end = \"16:00\";\r\n+            if (times.length === 1) {\r\n+              start = times[0];\r\n+              end = `${String(Number(start.split(\":\")[0]) + 1).padStart(2, \"0\")}:00`;\r\n+            } else if (times.length > 1) {\r\n+              start = times[0];\r\n+              end = times[times.length - 1];\r\n+              end = `${String(Number(end.split(\":\")[0]) + 1).padStart(2, \"0\")}:00`;\r\n+            } else if (item.title.includes(\"morning\")) {\r\n+              start = \"09:00\";\r\n+              end = \"12:00\";\r\n+            } else if (item.title.includes(\"afternoon\")) {\r\n+              start = \"13:00\";\r\n+              end = \"16:00\";\r\n+            }\r\n+            period = `[${date}T${start}:00+00:00,${date}T${end}:00+00:00)`;\r\n+          }\r\n+          // lier le bon PaymentIntent\r\n+          const pi = oneTimePaymentIntents.find(p => p.index === idx);\r\n \r\n-        console.log(\"Traitement item:\", item);\r\n-        if (item.id.includes(\"domiciliation\")) {\r\n+          const insertData = {\r\n+            user_id: userId!,\r\n+            reservation_type: getReservationType(item.id),\r\n+            reservation_date: date,\r\n+            price: item.price,\r\n+            period,\r\n+            payment_intent_id: pi?.id || null,\r\n+          };\r\n+          console.log(\"Insertion réservation:\", insertData);\r\n+          const { error } = await supabase\r\n+            .from(\"reservations\")\r\n+            .insert(insertData);\r\n+          if (error) console.error(\"Erreur réservation:\", error);\r\n+        }\r\n+        // Domiciliation\r\n+        else if (item.id.includes(\"domiciliation\")) {\r\n           const duration = item.title.includes(\"1 an\")\r\n             ? \"12mois\"\r\n             : item.title.includes(\"6 mois\")\r\n             ? \"6mois\"\r\n             : item.title.includes(\"3 mois\")\r\n             ? \"3mois\"\r\n             : null;\r\n-\r\n           const plan_type = item.title.includes(\"micro\")\r\n             ? \"micro\"\r\n             : item.title.includes(\"entreprise\")\r\n             ? \"entreprise\"\r\n             : item.title.includes(\"association\")\r\n             ? \"association\"\r\n             : null;\r\n-\r\n           const insertData = {\r\n             user_id: userId!,\r\n             address: data.address,\r\n-            duration, // string | null\r\n-            plan_type, // string | null\r\n-            status: \"active\", // si tu veux stocker un statut\r\n-            // renewal_date: … si tu veux gérer la date de renouvellement\r\n+            duration,\r\n+            plan_type,\r\n+            status: \"active\",\r\n           };\r\n-\r\n           console.log(\"Insertion domiciliation:\", insertData);\r\n           const { error } = await supabase\r\n             .from(\"user_domiciliations\")\r\n             .insert(insertData);\r\n-\r\n-          if (error) console.error(\"Erreur ajout domiciliation:\", error);\r\n-        } else if (\r\n-          item.id.includes(\"location-bureau\") ||\r\n-          item.id.includes(\"formation-room\") ||\r\n-          item.id.includes(\"coworking-space\")\r\n-        ) {\r\n-          const dateMatch = item.id.match(/\\d{4}-\\d{2}-\\d{2}/);\r\n-          const date = dateMatch ? dateMatch[0] : null;\r\n-\r\n-          // Utilise la période exacte du panier si elle existe\r\n-          // On tente d'utiliser la propriété period si elle existe, sinon on la calcule à partir du titre\r\n-          let period = (item as any).period;\r\n-          if (!period) {\r\n-            // Extraction des horaires depuis le titre (ex: \"Salle de formation — halfDay (morning) — 2025-05-28 \")\r\n-            const timeMatches = item.title.match(/\\d{2}:\\d{2}/g);\r\n-            let start = \"09:00\",\r\n-              end = \"16:00\";\r\n-\r\n-            if (timeMatches?.length === 1) {\r\n-              start = timeMatches[0];\r\n-              end =\r\n-                String(Number(start.split(\":\")[0]) + 1).padStart(2, \"0\") +\r\n-                \":00\";\r\n-            } else if (timeMatches?.length > 1) {\r\n-              start = timeMatches[0];\r\n-              end = timeMatches[timeMatches.length - 1];\r\n-              end =\r\n-                String(Number(end.split(\":\")[0]) + 1).padStart(2, \"0\") + \":00\";\r\n-            } else if (item.title.includes(\"morning\")) {\r\n-              start = \"09:00\";\r\n-              end = \"12:00\";\r\n-            } else if (item.title.includes(\"afternoon\")) {\r\n-              start = \"13:00\";\r\n-              end = \"16:00\";\r\n-            }\r\n-\r\n-            if (date) {\r\n-              const startISO = `${date}T${start}:00+00:00`;\r\n-              const endISO = `${date}T${end}:00+00:00`;\r\n-              period = `[${startISO},${endISO})`;\r\n-            }\r\n-          }\r\n-\r\n-          if (date && period) {\r\n-            const reservationType = getReservationType(item.id);\r\n-\r\n-            const insertData = {\r\n-              user_id: userId!,\r\n-              reservation_type: reservationType,\r\n-              reservation_date: date,\r\n-              price: item.price,\r\n-              period,\r\n-              payment_intent_id: oneTimePaymentIntentId,\r\n-            };\r\n-            console.log(\"Insertion réservation:\", insertData);\r\n-\r\n-            const { error } = await supabase\r\n-              .from(\"reservations\")\r\n-              .insert(insertData);\r\n-            if (error) console.error(\"Erreur ajout réservation:\", error);\r\n-          } else {\r\n-            console.error(\"Date ou période non extraite depuis item:\", item);\r\n-          }\r\n-          // ...existing code...\r\n-          // ...existing code...\r\n-        } else {\r\n+          if (error) console.error(\"Erreur domiciliation:\", error);\r\n+        }\r\n+        // Autres services\r\n+        else {\r\n           const insertData = {\r\n-            ...baseInsert,\r\n+            user_id: userId!,\r\n+            name: item.title,\r\n+            price: item.price,\r\n+            status: \"active\",\r\n             category: \"commande\",\r\n           };\r\n           console.log(\"Insertion service:\", insertData);\r\n           const { error } = await supabase\r\n             .from(\"user_services\")\r\n             .insert(insertData);\r\n-          if (error) console.error(\"Erreur ajout service:\", error);\r\n+          if (error) console.error(\"Erreur service:\", error);\r\n         }\r\n-      }\r\n-      clearCart();\r\n-      navigate(\"/confirmation\", {\r\n-        state: {\r\n-          order: { items, subtotal, tax, total, clientInfo: data },\r\n-        },\r\n-      });\r\n-    } catch (err) {\r\n-      console.error(\"Erreur dans handleSubmit:\", err);\r\n-    } finally {\r\n-      setIsProcessing(false);\r\n-    }\r\n-  };\r\n+      })\r\n+    );\r\n \r\n+    clearCart();\r\n+    navigate(\"/confirmation\", {\r\n+      state: { order: { items, subtotal, tax, total, clientInfo: data } },\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(\"Erreur dans handleSubmit:\", err);\r\n+    toast.error((err as Error).message);\r\n+  } finally {\r\n+    setIsProcessing(false);\r\n+  }\r\n+};\r\n+\r\n   return (\r\n     <div className=\"min-h-screen flex flex-col\">\r\n       <Navbar />\r\n       <div className=\"flex-1 py-16\">\r\n"
                },
                {
                    "date": 1748377039702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -503,34 +503,54 @@\n               return;\r\n             }\r\n             // calcul de la période (ton parsing existant)\r\n             let period = (item as any).period;\r\n+            let periodKey: \"morning\" | \"afternoon\" | \"journée\";\r\n             if (!period) {\r\n               const times = item.title.match(/\\d{2}:\\d{2}/g) || [];\r\n-              let start = \"09:00\",\r\n-                end = \"16:00\";\r\n+              let start: string,\r\n+                end: string,\r\n+                periodKey: \"morning\" | \"afternoon\" | \"journée\";\r\n+\r\n               if (times.length === 1) {\r\n                 start = times[0];\r\n-                end = `${String(Number(start.split(\":\")[0]) + 1).padStart(\r\n-                  2,\r\n-                  \"0\"\r\n-                )}:00`;\r\n+                end = `${String(+start.split(\":\")[0] + 1).padStart(2, \"0\")}:00`;\r\n+                periodKey = \"morning\";\r\n               } else if (times.length > 1) {\r\n                 start = times[0];\r\n-                end = times[times.length - 1];\r\n-                end = `${String(Number(end.split(\":\")[0]) + 1).padStart(\r\n-                  2,\r\n-                  \"0\"\r\n-                )}:00`;\r\n+                end = `${String(\r\n+                  +times[times.length - 1].split(\":\")[0] + 1\r\n+                ).padStart(2, \"0\")}:00`;\r\n+                periodKey = times.length === 2 ? \"morning\" : \"journée\";\r\n               } else if (item.title.includes(\"morning\")) {\r\n                 start = \"09:00\";\r\n                 end = \"12:00\";\r\n+                periodKey = \"morning\";\r\n               } else if (item.title.includes(\"afternoon\")) {\r\n                 start = \"13:00\";\r\n                 end = \"16:00\";\r\n+                periodKey = \"afternoon\";\r\n+              } else {\r\n+                // **full day fallback**\r\n+                start = \"09:00\";\r\n+                end = \"16:00\";\r\n+                periodKey = \"journée\";\r\n               }\r\n+\r\n               period = `[${date}T${start}:00+00:00,${date}T${end}:00+00:00)`;\r\n+              // stockez periodKey pour fabriquer votre type plus bas\r\n             }\r\n+\r\n+            // Puis, au moment de définir reservation_type :\r\n+            const slug = item.id.split(\"-\").slice(0, 2).join(\"-\"); // ex: \"formation-room\"\r\n+            const typeTranslated =\r\n+              periodKey === \"morning\"\r\n+                ? \"matin\"\r\n+                : periodKey === \"afternoon\"\r\n+                ? \"après-midi\"\r\n+                : \"journée\";\r\n+\r\n+            const reservationType = `${slug} ${typeTranslated}`;\r\n             // lier le bon PaymentIntent\r\n             const pi = oneTimePaymentIntents.find((p) => p.index === idx);\r\n \r\n             const insertData = {\r\n"
                }
            ],
            "date": 1748369608421,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Navbar from '@/components/Navbar';\r\nimport Footer from '@/components/Footer';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { useCart } from '@/components/cart/CartContext';\r\n\r\n// Ajout du type CartItem avec la propriété optionnelle 'period'\r\ntype CartItem = {\r\n  id: string;\r\n  title: string;\r\n  price: number;\r\n  quantity: number;\r\n  period?: string; // Ajout de la propriété optionnelle period\r\n};\r\nimport { Check, CreditCard } from 'lucide-react';\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\nimport { z } from 'zod';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport {\r\n  CardElement,\r\n  useStripe,\r\n  useElements,\r\n} from '@stripe/react-stripe-js'\r\n\r\nconst formSchema = z.object({\r\n  email: z.string().email({ message: \"Email invalide\" }),\r\n  firstName: z.string().min(2, { message: \"Prénom requis\" }),\r\n  lastName: z.string().min(2, { message: \"Nom requis\" }),\r\n  companyName: z.string().min(2, { message: \"Nom de l'entreprise requis\" }),\r\n  businessActivity: z.string().min(2, { message: \"Activité de l'entreprise requise\" }),\r\n  siretNumber: z.string().min(14, { message: \"Numéro SIRET requis (14 chiffres)\" }).max(14),\r\n  address: z.string().min(5, { message: \"Adresse requise\" }),\r\n  addressDetails: z.string().optional(),\r\n  city: z.string().min(2, { message: \"Ville requise\" }),\r\n  postalCode: z.string().regex(/^\\d{5}$/, { message: \"Code postal à 5 chiffres requis\" }),\r\n  phone: z.string().optional(),\r\n  country: z.string().default(\"France\"),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\nconst Checkout = () => {\r\n  const stripe = useStripe()\r\n  const elements = useElements()\r\n  const { items, total, subtotal, tax, clearCart } = useCart();\r\n  const navigate = useNavigate();\r\n  \r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      companyName: \"\",\r\n      businessActivity: \"\",\r\n      siretNumber: \"\",\r\n      address: \"\",\r\n      addressDetails: \"\",\r\n      city: \"\",\r\n      postalCode: \"\",\r\n      phone: \"\",\r\n      country: \"France\",\r\n    }\r\n  });\r\n\r\nconst subscriptionProductIds = [\r\n  'domiciliation-mensuel-societe-normal',\r\n  'domiciliation-mensuel-societe-reduit',\r\n  'domiciliation-mensuel-auto-entrepreneur-normal',\r\n  'domiciliation-mensuel-auto-entreprise-reduit',\r\n  'domiciliation-mensuel-association',\r\n  'service-reexpedition',\r\n  'service-scan',\r\n  'service-colis',\r\n];\r\n\r\nconst getPriceIdFromProductId = (productId: string): string | undefined => {\r\n  const map: Record<string, string> = {\r\n    'domiciliation-mensuel-societe-normal': 'price_1RSKGYQ5vrwB5bWyC5m7YKIm', //fait\r\n    'domiciliation-mensuel-societe-reduit': 'price_1RSMFmQ5vrwB5bWyBk9nXFcb', //fait\r\n    'domiciliation-mensuel-auto-entrepreneur-normal': 'price_1RSMGfQ5vrwB5bWyWe4cF5pp',//fait\r\n    'domiciliation-mensuel-auto-entreprise-reduit': 'price_1RSMGIQ5vrwB5bWy4e4ogBUY', //fait\r\n    'domiciliation-mensuel-association': 'price_1RSLsMQ5vrwB5bWydudKGQ7b', //fait\r\n    'service-reexpedition': 'price_1RSLlyQ5vrwB5bWyTf2ay5tf', //fait\r\n    'service-scan': 'price_1RSLmKQ5vrwB5bWyRouPTXPR', //fait\r\n    'service-colis': 'price_1RSLmcQ5vrwB5bWyeWckoEPg', //fait\r\n    'coworking-space': 'price_1RSMKlQ5vrwB5bWyTH1NrRlA', //fait\r\n    'location-bureau': 'price_1RSMLjQ5vrwB5bWyUerVSlHF', //fait\r\n    'formation-room': 'price_1RSMLIQ5vrwB5bWysp4JTZZQ', //fait\r\n    'domiciliation-1an-entreprise': 'price_1RSLi2Q5vrwB5bWyeizWaoWy', //fait\r\n    'domiciliation-3mois-entreprise': 'price_1RSLinQ5vrwB5bWyYpgyzSyL', //fait\r\n    'domiciliation-3mois-micro': 'price_1RSLjPQ5vrwB5bWyoNy1OKMb', //fait\r\n    'domiciliation-6mois-entreprise': 'price_1RSLkAQ5vrwB5bWyk4rjnkyb',//fait\r\n    'domiciliation-6mois-micro': 'price_1RSLkfQ5vrwB5bWymj0lkM4Z',//fait\r\n    'pack-domine': 'price_1RSLlCQ5vrwB5bWyqOByLGS5', //fait\r\n    'vtc-creation': 'price_1RSLnfQ5vrwB5bWy7D4g1s1M', //fait\r\n    'bank-account': 'price_1RSLo4Q5vrwB5bWyqaPfyWN0', //fait\r\n    'company-creation': 'price_1RSLoRQ5vrwB5bWyLbVvOhhe', //fait\r\n    'micro-company': 'price_1RSLozQ5vrwB5bWyhXZaREUE', //fait\r\n    'company-transfer': 'price_1RSLpLQ5vrwB5bWyFdN0Wljp', //fait\r\n    'share-transfer': 'price_1RSLpjQ5vrwB5bWynvYt7DzQ', //fait\r\n    'commercial-ad': 'price_1RSLqCQ5vrwB5bWyabANz81P', //fait\r\n    'quote-creation': 'price_1RSLqdQ5vrwB5bWyuMOQBt2h', //fait\r\n    'annual-accounts': 'price_1RSLqzQ5vrwB5bWyp2PPrbP2', //fait\r\n    'company-modification': 'price_1RSLrMQ5vrwB5bWyqYeVbL0c', //fait\r\n\r\n  };\r\n  return map[productId];\r\n};\r\nconst [userId, setUserId] = useState<string | null>(null);\r\n\r\nuseEffect(() => {\r\n  const getSession = async () => {\r\n    const { data } = await supabase.auth.getSession();\r\n    const id = data?.session?.user.id;\r\n    setUserId(id || null);\r\n    // console.log(\"👤 ID utilisateur récupéré depuis Supabase :\", id);\r\n  };\r\n\r\n  getSession();\r\n}, []);\r\nconst getReservationType = (id: string) => {\r\n  if (id === 'coworking-space') return 'coworking';\r\n  if (id === 'formation-room') return 'formation';\r\n  if (id === 'location-bureau') return 'bureau';\r\n  return id;\r\n};\r\n\r\n\r\nconst handleSubmit = async (data: FormValues) => {\r\n  setIsProcessing(true);\r\n  if (!stripe || !elements) return;\r\n\r\n  console.log('Début de handleSubmit');\r\n\r\n  const card = elements.getElement(CardElement);\r\n  if (!card) return;\r\n\r\n  const oneTimeItems = items\r\n    .filter(item => !subscriptionProductIds.includes(item.id))\r\n    .map(item => ({\r\n      amount: Math.round(item.price * 100),\r\n      quantity: item.quantity,\r\n    }));\r\n\r\n  const subscriptionItems = items\r\n    .filter(item => subscriptionProductIds.includes(item.id))\r\n    .map(item => {\r\n      const priceId = getPriceIdFromProductId(item.id);\r\n      if (!priceId) throw new Error(`Price ID manquant pour ${item.id}`);\r\n      return { price: priceId, quantity: item.quantity };\r\n    });\r\n\r\n  try {\r\n    const { error: paymentError, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: 'card',\r\n      card,\r\n      billing_details: {\r\n        email: data.email,\r\n        name: `${data.firstName} ${data.lastName}`,\r\n      },\r\n    });\r\n\r\n    if (paymentError || !paymentMethod) {\r\n      console.error(paymentError);\r\n      setIsProcessing(false);\r\n      return;\r\n    }\r\n\r\n    console.log('Payment method créé:', paymentMethod);\r\n\r\n    const response = await fetch('https://mon-backend-node.vercel.app/api/create-payment-intent', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        email: data.email,\r\n        paymentMethodId: paymentMethod.id,\r\n        oneTimeItems,\r\n        subscriptionItems,\r\n        userId,\r\n        clientInfo: {\r\n          firstName: data.firstName,\r\n          lastName: data.lastName,\r\n          address: data.address,\r\n          siretNumber: data.siretNumber,\r\n          },\r\n          items,  // ← ton tableau d’objets { title, price, quantity }\r\n          total,\r\n      }),\r\n    });\r\n\r\n    const {\r\n      oneTimePaymentIntentClientSecret,\r\n      oneTimePaymentIntentId, \r\n      subscriptionClientSecret,\r\n      subscriptionPaymentIntentId\r\n    } = await response.json();\r\n\r\n    if (!response.ok) throw new Error('Erreur du backend');\r\n\r\n    console.log('Client secrets:', { oneTimePaymentIntentClientSecret, subscriptionClientSecret });\r\n\r\n    if (oneTimePaymentIntentClientSecret) {\r\n      const { error: confirmError } = await stripe.confirmCardPayment(oneTimePaymentIntentClientSecret, {\r\n        payment_method: paymentMethod.id,\r\n        receipt_email: data.email,\r\n      });\r\n      if (confirmError) throw new Error('Échec du paiement unique');\r\n    }\r\n\r\n    if (subscriptionClientSecret) {\r\n      const { error: confirmError } = await stripe.confirmCardPayment(subscriptionClientSecret);\r\n      if (confirmError) throw new Error(\"Échec de paiement de l'abonnement\");\r\n    }\r\n\r\n    for (const item of items) {\r\n      const baseInsert = {\r\n        user_id: userId!,\r\n        name: item.title,\r\n        price: item.price,\r\n        status: 'active',\r\n      };\r\n\r\n      console.log('Traitement item:', item);\r\n        if (item.id.includes('domiciliation')) {\r\n          const duration =\r\n            item.title.includes('1 an')   ? '12mois' :\r\n            item.title.includes('6 mois') ? '6mois'  :\r\n            item.title.includes('3 mois') ? '3mois'  :\r\n            null;\r\n\r\n          const plan_type =\r\n            item.title.includes('micro')       ? 'micro' :\r\n            item.title.includes('entreprise')  ? 'entreprise' :\r\n            item.title.includes('association') ? 'association' :\r\n            null;\r\n\r\n          const insertData = {\r\n            user_id:   userId!,\r\n            address:   data.address,\r\n            duration,          // string | null\r\n            plan_type,         // string | null\r\n            status:    'active', // si tu veux stocker un statut\r\n            // renewal_date: … si tu veux gérer la date de renouvellement\r\n          };\r\n\r\n          console.log('Insertion domiciliation:', insertData);\r\n          const { error } = await supabase\r\n            .from('user_domiciliations')\r\n            .insert(insertData);\r\n\r\n          if (error) console.error('Erreur ajout domiciliation:', error);\r\n        }\r\n\r\n        else if (item.id.includes('location-bureau') || item.id.includes('formation-room') || item.id.includes('coworking-space')) {\r\n          const dateMatch = item.id.match(/\\d{4}-\\d{2}-\\d{2}/);\r\n          const date = dateMatch ? dateMatch[0] : null;\r\n\r\n          // Utilise la période exacte du panier si elle existe\r\n            // On tente d'utiliser la propriété period si elle existe, sinon on la calcule à partir du titre\r\n            let period = (item as any).period;\r\n            if (!period) {\r\n            // Extraction des horaires depuis le titre (ex: \"Salle de formation — halfDay (morning) — 2025-05-28 \")\r\n            const timeMatches = item.title.match(/\\d{2}:\\d{2}/g);\r\n            let start = '09:00', end = '16:00';\r\n\r\n            if (timeMatches?.length === 1) {\r\n              start = timeMatches[0];\r\n              end = String(Number(start.split(':')[0]) + 1).padStart(2, '0') + ':00';\r\n            } else if (timeMatches?.length > 1) {\r\n              start = timeMatches[0];\r\n              end = timeMatches[timeMatches.length - 1];\r\n              end = String(Number(end.split(':')[0]) + 1).padStart(2, '0') + ':00';\r\n            } else if (item.title.includes('morning')) {\r\n              start = '09:00';\r\n              end = '12:00';\r\n            } else if (item.title.includes('afternoon')) {\r\n              start = '13:00';\r\n              end = '16:00';\r\n            }\r\n\r\n            if (date) {\r\n              const startISO = `${date}T${start}:00+00:00`;\r\n              const endISO = `${date}T${end}:00+00:00`;\r\n              period = `[${startISO},${endISO})`;\r\n            }\r\n            }\r\n\r\n          if (date && period) {\r\n            const reservationType = getReservationType(item.id);\r\n\r\n            const insertData = {\r\n              user_id: userId!,\r\n              reservation_type: reservationType,\r\n              reservation_date: date,\r\n              price: item.price,\r\n              period,\r\n              payment_intent_id: oneTimePaymentIntentId,\r\n            };\r\n            console.log('Insertion réservation:', insertData);\r\n\r\n            const { error } = await supabase.from('reservations').insert(insertData);\r\n            if (error) console.error('Erreur ajout réservation:', error);\r\n          } else {\r\n            console.error('Date ou période non extraite depuis item:', item);\r\n          }\r\n        // ...existing code...\r\n        // ...existing code...\r\n\r\n              \r\n        }\r\n       else {\r\n        const insertData = {\r\n          ...baseInsert,\r\n          category: 'commande',\r\n        };\r\n        console.log('Insertion service:', insertData);\r\n        const { error } = await supabase.from('user_services').insert(insertData);\r\n        if (error) console.error('Erreur ajout service:', error);\r\n      }\r\n    }\r\n    clearCart();\r\n    navigate('/confirmation', {\r\n      state: {\r\n        order: { items, subtotal, tax, total, clientInfo: data },\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.error('Erreur dans handleSubmit:', err);\r\n  } finally {\r\n    setIsProcessing(false);\r\n  }\r\n};\r\n\r\n\r\n\r\n  return (\r\n  <div className=\"min-h-screen flex flex-col\">\r\n    <Navbar />\r\n    <div className=\"flex-1 py-16\">\r\n      <div className=\"container mx-auto px-4\">\r\n        <h1 className=\"text-3xl font-bold mb-8 text-center\">Finaliser votre commande</h1>\r\n\r\n        <div className=\"grid md:grid-cols-2 gap-8\">\r\n          {/* Informations de facturation et paiement */}\r\n          <div>\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Informations de facturation</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Form {...form}>\r\n                  <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"email\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>E-mail</FormLabel>\r\n                          <FormControl>\r\n                            <Input type=\"email\" placeholder=\"votre@email.com\" {...field} />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n\r\n                    <div className=\"pt-4 border-t mt-2\">\r\n                      <h3 className=\"font-medium mb-4\">Adresse de facturation</h3>\r\n                      <p className=\"text-sm text-gray-600 mb-4\">\r\n                        Entrez l'adresse de facturation qui correspond à votre moyen de paiement.\r\n                      </p>\r\n\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"country\"\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Pays / Région</FormLabel>\r\n                            <FormControl>\r\n                              <Input value=\"France\" disabled {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n\r\n                      <div className=\"grid grid-cols-2 gap-4 mt-4\">\r\n                        <FormField\r\n                          control={form.control}\r\n                          name=\"firstName\"\r\n                          render={({ field }) => (\r\n                            <FormItem>\r\n                              <FormLabel>Prénom</FormLabel>\r\n                              <FormControl>\r\n                                <Input placeholder=\"Jean\" {...field} />\r\n                              </FormControl>\r\n                              <FormMessage />\r\n                            </FormItem>\r\n                          )}\r\n                        />\r\n                        <FormField\r\n                          control={form.control}\r\n                          name=\"lastName\"\r\n                          render={({ field }) => (\r\n                            <FormItem>\r\n                              <FormLabel>Nom</FormLabel>\r\n                              <FormControl>\r\n                                <Input placeholder=\"Dupont\" {...field} />\r\n                              </FormControl>\r\n                              <FormMessage />\r\n                            </FormItem>\r\n                          )}\r\n                        />\r\n                      </div>\r\n\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"companyName\"\r\n                        render={({ field }) => (\r\n                          <FormItem className=\"mt-4\">\r\n                            <FormLabel>Nom de l'entreprise</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"Entreprise SAS\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"businessActivity\"\r\n                        render={({ field }) => (\r\n                          <FormItem className=\"mt-4\">\r\n                            <FormLabel>Activité de l'entreprise</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"Conseil informatique\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"siretNumber\"\r\n                        render={({ field }) => (\r\n                          <FormItem className=\"mt-4\">\r\n                            <FormLabel>Numéro SIRET</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"12345678901234\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"address\"\r\n                        render={({ field }) => (\r\n                          <FormItem className=\"mt-4\">\r\n                            <FormLabel>Adresse postale</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"123 Rue de Paris\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"addressDetails\"\r\n                        render={({ field }) => (\r\n                          <FormItem className=\"mt-4\">\r\n                            <FormLabel>Complément d'adresse (optionnel)</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"Appartement, étage, etc.\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n\r\n                      <div className=\"grid grid-cols-2 gap-4 mt-4\">\r\n                        <FormField\r\n                          control={form.control}\r\n                          name=\"city\"\r\n                          render={({ field }) => (\r\n                            <FormItem>\r\n                              <FormLabel>Ville</FormLabel>\r\n                              <FormControl>\r\n                                <Input placeholder=\"Paris\" {...field} />\r\n                              </FormControl>\r\n                              <FormMessage />\r\n                            </FormItem>\r\n                          )}\r\n                        />\r\n                        <FormField\r\n                          control={form.control}\r\n                          name=\"postalCode\"\r\n                          render={({ field }) => (\r\n                            <FormItem>\r\n                              <FormLabel>Code postal</FormLabel>\r\n                              <FormControl>\r\n                                <Input placeholder=\"75001\" {...field} />\r\n                              </FormControl>\r\n                              <FormMessage />\r\n                            </FormItem>\r\n                          )}\r\n                        />\r\n                      </div>\r\n\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"phone\"\r\n                        render={({ field }) => (\r\n                          <FormItem className=\"mt-4\">\r\n                            <FormLabel>Téléphone (optionnel)</FormLabel>\r\n                            <FormControl>\r\n                              <Input type=\"tel\" placeholder=\"0612345678\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                    </div>\r\n\r\n                    {/* <div className=\"pt-4 border-t mt-6\">\r\n                      <h3 className=\"font-medium mb-4\">Informations de paiement</h3>\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"cardNumber\"\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Numéro de carte</FormLabel>\r\n                            <FormControl>\r\n                              <div className=\"relative\">\r\n                                <Input placeholder=\"1234 5678 9012 3456\" {...field} />\r\n                                <CreditCard className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400\" size={16} />\r\n                              </div>\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                      <div className=\"grid grid-cols-2 gap-4 mt-4\">\r\n                        <FormField\r\n                          control={form.control}\r\n                          name=\"expiryDate\"\r\n                          render={({ field }) => (\r\n                            <FormItem>\r\n                              <FormLabel>Date d'expiration</FormLabel>\r\n                              <FormControl>\r\n                                <Input placeholder=\"MM/AA\" {...field} />\r\n                              </FormControl>\r\n                              <FormMessage />\r\n                            </FormItem>\r\n                          )}\r\n                        />\r\n                        <FormField\r\n                          control={form.control}\r\n                          name=\"cvv\"\r\n                          render={({ field }) => (\r\n                            <FormItem>\r\n                              <FormLabel>CVV</FormLabel>\r\n                              <FormControl>\r\n                                <Input placeholder=\"123\" {...field} />\r\n                              </FormControl>\r\n                              <FormMessage />\r\n                            </FormItem>\r\n                          )}\r\n                        />\r\n                      </div>\r\n                    </div> */}\r\n                    <div className=\"pt-4 border-t mt-6\">\r\n                      <h3 className=\"font-medium mb-4\">Informations de paiement</h3>\r\n                      <div className=\"border p-3 rounded\">\r\n                        <CardElement options={{ style: { base: { fontSize: '16px' } } }} />\r\n                      </div>\r\n                    </div>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      className=\"w-full bg-lysco-turquoise hover:bg-lysco-turquoise/90 mt-6\"\r\n                      disabled={isProcessing}\r\n                    >\r\n                      {isProcessing ? \"Traitement en cours...\" : `Payer ${total.toFixed(2)} €`}\r\n                    </Button>\r\n                  </form>\r\n                </Form>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Résumé de la commande */}\r\n          <div>\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Votre commande</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {items.map(item => (\r\n                    <div key={item.id} className=\"flex justify-between pb-2 border-b\">\r\n                      <div>\r\n                        <p className=\"font-medium\">{item.title}</p>\r\n                        <p className=\"text-sm text-gray-600\">Quantité: {item.quantity}</p>\r\n                      </div>\r\n                      <p className=\"font-medium\">{(item.price * item.quantity).toFixed(2)} €</p>\r\n                    </div>\r\n                  ))}\r\n                  <div className=\"pt-4\">\r\n                    <div className=\"flex justify-between\">\r\n                      <span>Sous-total</span>\r\n                      <span>{subtotal.toFixed(2)} €</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between mt-2\">\r\n                      <span>TVA (20%)</span>\r\n                      <span>{tax.toFixed(2)} €</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between pt-4 mt-2 border-t font-bold\">\r\n                      <span>Total</span>\r\n                      <span>{total.toFixed(2)} €</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <Footer />\r\n  </div>\r\n);\r\n\r\n};\r\n\r\nexport default Checkout;\r\n"
        }
    ]
}