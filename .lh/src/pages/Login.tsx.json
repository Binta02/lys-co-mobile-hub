{
    "sourceFile": "src/pages/Login.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1751277285965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751277602900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,40 @@\n-import React, { useState, useEffect } from \"react\";\r\n-import { Link, useNavigate, useLocation } from \"react-router-dom\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { Input } from \"@/components/ui/input\";\r\n-import { Label } from \"@/components/ui/label\";\r\n-import {\r\n-  Card,\r\n-  CardContent,\r\n-  CardDescription,\r\n-  CardFooter,\r\n-  CardHeader,\r\n-  CardTitle,\r\n-} from \"@/components/ui/card\";\r\n-import { Eye, EyeOff, Mail, Lock } from \"lucide-react\";\r\n-import Navbar from \"@/components/Navbar\";\r\n-import Footer from \"@/components/Footer\";\r\n-import { supabase } from \"@/integrations/supabase/client\";\r\n-import { toast } from \"@/components/ui/sonner\";\r\n-import { z } from \"zod\";\r\n-import { useForm } from \"react-hook-form\";\r\n-import { zodResolver } from \"@hookform/resolvers/zod\";\r\n-import {\r\n-  Form,\r\n-  FormControl,\r\n-  FormField,\r\n-  FormItem,\r\n-  FormMessage,\r\n-} from \"@/components/ui/form\";\r\n \r\n+import React, { useState, useEffect } from 'react';\r\n+import { Link, useNavigate, useLocation } from 'react-router-dom';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Input } from '@/components/ui/input';\r\n+import { Label } from '@/components/ui/label';\r\n+import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\r\n+import { Eye, EyeOff, Mail, Lock } from 'lucide-react';\r\n+import Navbar from '@/components/Navbar';\r\n+import Footer from '@/components/Footer';\r\n+import { supabase } from '@/integrations/supabase/client';\r\n+import { toast } from '@/components/ui/sonner';\r\n+import { z } from 'zod';\r\n+import { useForm } from 'react-hook-form';\r\n+import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { Form, FormControl, FormField, FormItem, FormMessage } from '@/components/ui/form';\r\n+// Vérification de la session utilisateur\r\n+\r\n+\r\n const loginSchema = z.object({\r\n   email: z.string().email(\"Adresse email invalide\"),\r\n-  password: z\r\n-    .string()\r\n-    .min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\r\n+  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\r\n });\r\n+const { data: profileData } = await supabase\r\n+  .from(\"profiles\")\r\n+  .select(\"deleted_at\")\r\n+  .eq(\"id\", data.user.id)\r\n+  .single();\r\n \r\n+if (profileData?.deleted_at) {\r\n+  toast.error(\"Votre compte est désactivé.\");\r\n+  await supabase.auth.signOut();\r\n+  return;\r\n+}\r\n+\r\n+\r\n type LoginFormValues = z.infer<typeof loginSchema>;\r\n \r\n const Login: React.FC = () => {\r\n   const [showPassword, setShowPassword] = useState(false);\r\n@@ -43,88 +43,75 @@\n   const location = useLocation();\r\n   const form = useForm<LoginFormValues>({\r\n     resolver: zodResolver(loginSchema),\r\n     defaultValues: {\r\n-      email: \"\",\r\n-      password: \"\",\r\n+      email: '',\r\n+      password: '',\r\n     },\r\n   });\r\n \r\n   // Récupérer le paramètre redirect de l'URL\r\n   const searchParams = new URLSearchParams(location.search);\r\n-  const redirectUrl = searchParams.get(\"redirect\");\r\n+  const redirectUrl = searchParams.get('redirect');\r\n \r\n   // Rediriger si déjà connecté\r\n   useEffect(() => {\r\n     const checkSession = async () => {\r\n-      const {\r\n-        data: { session },\r\n-      } = await supabase.auth.getSession();\r\n+      const { data: { session } } = await supabase.auth.getSession();\r\n       if (session) {\r\n         if (redirectUrl) {\r\n           navigate(redirectUrl);\r\n         } else {\r\n-          navigate(\"/dashboard\");\r\n+          navigate('/dashboard');\r\n         }\r\n       }\r\n     };\r\n-\r\n+    \r\n     checkSession();\r\n   }, [navigate, redirectUrl]);\r\n \r\n   const handleLogin = async (values: LoginFormValues) => {\r\n     setIsLoading(true);\r\n-\r\n+    \r\n     try {\r\n       const { data, error } = await supabase.auth.signInWithPassword({\r\n         email: values.email,\r\n         password: values.password,\r\n       });\r\n \r\n       if (error) {\r\n-        toast.error(\"Erreur de connexion\", {\r\n-          description: error.message,\r\n+        toast.error('Erreur de connexion', {\r\n+          description: error.message\r\n         });\r\n         return;\r\n       }\r\n \r\n       if (data.user) {\r\n-        toast.success(\"Connexion réussie\", {\r\n-          description: \"Bienvenue sur Lys&Co!\",\r\n+        toast.success('Connexion réussie', {\r\n+          description: 'Bienvenue sur Lys&Co!'\r\n         });\r\n-\r\n+        \r\n         // Redirection après connexion réussie\r\n         if (redirectUrl) {\r\n           navigate(redirectUrl);\r\n         } else {\r\n-          navigate(\"/dashboard\");\r\n+          navigate('/dashboard');\r\n         }\r\n       }\r\n     } catch (error) {\r\n-      console.error(\"Login error:\", error);\r\n-      toast.error(\"Une erreur inattendue est survenue\");\r\n+      console.error('Login error:', error);\r\n+      toast.error('Une erreur inattendue est survenue');\r\n     } finally {\r\n       setIsLoading(false);\r\n     }\r\n   };\r\n-  const { data: profileData } = await supabase\r\n-    .from(\"profiles\")\r\n-    .select(\"deleted_at\")\r\n-    .eq(\"id\", data.user.id)\r\n-    .single();\r\n+  \r\n \r\n-  if (profileData?.deleted_at) {\r\n-    toast.error(\"Votre compte est désactivé.\");\r\n-    await supabase.auth.signOut();\r\n-    return;\r\n-  }\r\n-\r\n   const handleResetPassword = async () => {\r\n-    const email = form.getValues(\"email\");\r\n+    const email = form.getValues('email');\r\n     if (!email) {\r\n-      toast.error(\"Email requis\", {\r\n-        description:\r\n-          \"Veuillez entrer votre email pour réinitialiser votre mot de passe\",\r\n+      toast.error('Email requis', {\r\n+        description: 'Veuillez entrer votre email pour réinitialiser votre mot de passe'\r\n       });\r\n       return;\r\n     }\r\n \r\n@@ -134,46 +121,40 @@\n         redirectTo: `${window.location.origin}/reset-password`,\r\n       });\r\n \r\n       if (error) {\r\n-        toast.error(\"Erreur\", {\r\n-          description: error.message,\r\n+        toast.error('Erreur', {\r\n+          description: error.message\r\n         });\r\n         return;\r\n       }\r\n \r\n-      toast.success(\"Email envoyé\", {\r\n-        description:\r\n-          \"Veuillez vérifier votre boîte mail pour réinitialiser votre mot de passe\",\r\n+      toast.success('Email envoyé', {\r\n+        description: 'Veuillez vérifier votre boîte mail pour réinitialiser votre mot de passe'\r\n       });\r\n     } catch (error) {\r\n-      console.error(\"Reset password error:\", error);\r\n-      toast.error(\"Une erreur inattendue est survenue\");\r\n+      console.error('Reset password error:', error);\r\n+      toast.error('Une erreur inattendue est survenue');\r\n     } finally {\r\n       setIsLoading(false);\r\n     }\r\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col min-h-screen\">\r\n       <Navbar />\r\n-\r\n+      \r\n       <main className=\"flex-1 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray-50\">\r\n         <Card className=\"w-full max-w-md\">\r\n           <CardHeader className=\"space-y-1\">\r\n-            <CardTitle className=\"text-2xl font-bold text-center\">\r\n-              Connexion\r\n-            </CardTitle>\r\n+            <CardTitle className=\"text-2xl font-bold text-center\">Connexion</CardTitle>\r\n             <CardDescription className=\"text-center\">\r\n               Entrez vos identifiants pour accéder à votre compte\r\n             </CardDescription>\r\n           </CardHeader>\r\n           <CardContent className=\"space-y-4\">\r\n             <Form {...form}>\r\n-              <form\r\n-                onSubmit={form.handleSubmit(handleLogin)}\r\n-                className=\"space-y-4\"\r\n-              >\r\n+              <form onSubmit={form.handleSubmit(handleLogin)} className=\"space-y-4\">\r\n                 <FormField\r\n                   control={form.control}\r\n                   name=\"email\"\r\n                   render={({ field }) => (\r\n@@ -181,12 +162,12 @@\n                       <Label htmlFor=\"email\">Email</Label>\r\n                       <div className=\"relative\">\r\n                         <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\r\n                         <FormControl>\r\n-                          <Input\r\n-                            id=\"email\"\r\n-                            type=\"email\"\r\n-                            placeholder=\"exemple@email.com\"\r\n+                          <Input \r\n+                            id=\"email\" \r\n+                            type=\"email\" \r\n+                            placeholder=\"exemple@email.com\" \r\n                             className=\"pl-10\"\r\n                             {...field}\r\n                           />\r\n                         </FormControl>\r\n@@ -201,9 +182,9 @@\n                   render={({ field }) => (\r\n                     <FormItem>\r\n                       <div className=\"flex items-center justify-between\">\r\n                         <Label htmlFor=\"password\">Mot de passe</Label>\r\n-                        <button\r\n+                        <button \r\n                           type=\"button\"\r\n                           onClick={handleResetPassword}\r\n                           className=\"text-xs text-lysco-turquoise hover:underline\"\r\n                         >\r\n@@ -212,17 +193,17 @@\n                       </div>\r\n                       <div className=\"relative\">\r\n                         <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\r\n                         <FormControl>\r\n-                          <Input\r\n-                            id=\"password\"\r\n-                            type={showPassword ? \"text\" : \"password\"}\r\n+                          <Input \r\n+                            id=\"password\" \r\n+                            type={showPassword ? \"text\" : \"password\"} \r\n                             className=\"pl-10 pr-10\"\r\n                             {...field}\r\n                           />\r\n                         </FormControl>\r\n-                        <button\r\n-                          type=\"button\"\r\n+                        <button \r\n+                          type=\"button\" \r\n                           onClick={() => setShowPassword(!showPassword)}\r\n                           className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\r\n                         >\r\n                           {showPassword ? (\r\n@@ -235,29 +216,29 @@\n                       <FormMessage />\r\n                     </FormItem>\r\n                   )}\r\n                 />\r\n-                <Button\r\n-                  type=\"submit\"\r\n+                <Button \r\n+                  type=\"submit\" \r\n                   className=\"w-full bg-lysco-turquoise hover:bg-opacity-90\"\r\n                   disabled={isLoading}\r\n                 >\r\n-                  {isLoading ? \"Connexion en cours...\" : \"Se connecter\"}\r\n+                  {isLoading ? 'Connexion en cours...' : 'Se connecter'}\r\n                 </Button>\r\n               </form>\r\n             </Form>\r\n           </CardContent>\r\n           <CardFooter className=\"flex flex-col space-y-4\">\r\n             <div className=\"text-center text-sm\">\r\n-              Pas encore de compte?{\" \"}\r\n+              Pas encore de compte?{' '}\r\n               <Link to=\"/register\" className=\"text-lysco-pink hover:underline\">\r\n                 Créer un compte\r\n               </Link>\r\n             </div>\r\n           </CardFooter>\r\n         </Card>\r\n       </main>\r\n-\r\n+      \r\n       <Footer />\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1751277729430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,20 +33,9 @@\n   password: z\r\n     .string()\r\n     .min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\r\n });\r\n-const { data: profileData } = await supabase\r\n-  .from(\"profiles\")\r\n-  .select(\"deleted_at\")\r\n-  .eq(\"id\", data.user.id)\r\n-  .single();\r\n \r\n-if (profileData?.deleted_at) {\r\n-  toast.error(\"Votre compte est désactivé.\");\r\n-  await supabase.auth.signOut();\r\n-  return;\r\n-}\r\n-\r\n type LoginFormValues = z.infer<typeof loginSchema>;\r\n \r\n const Login: React.FC = () => {\r\n   const [showPassword, setShowPassword] = useState(false);\r\n@@ -82,44 +71,94 @@\n \r\n     checkSession();\r\n   }, [navigate, redirectUrl]);\r\n \r\n+  // const handleLogin = async (values: LoginFormValues) => {\r\n+  //   setIsLoading(true);\r\n+\r\n+  //   try {\r\n+  //     const { data, error } = await supabase.auth.signInWithPassword({\r\n+  //       email: values.email,\r\n+  //       password: values.password,\r\n+  //     });\r\n+\r\n+  //     if (error) {\r\n+  //       toast.error(\"Erreur de connexion\", {\r\n+  //         description: error.message,\r\n+  //       });\r\n+  //       return;\r\n+  //     }\r\n+\r\n+  //     if (data.user) {\r\n+  //       toast.success(\"Connexion réussie\", {\r\n+  //         description: \"Bienvenue sur Lys&Co!\",\r\n+  //       });\r\n+\r\n+  //       // Redirection après connexion réussie\r\n+  //       if (redirectUrl) {\r\n+  //         navigate(redirectUrl);\r\n+  //       } else {\r\n+  //         navigate(\"/dashboard\");\r\n+  //       }\r\n+  //     }\r\n+  //   } catch (error) {\r\n+  //     console.error(\"Login error:\", error);\r\n+  //     toast.error(\"Une erreur inattendue est survenue\");\r\n+  //   } finally {\r\n+  //     setIsLoading(false);\r\n+  //   }\r\n+  // };\r\n+\r\n   const handleLogin = async (values: LoginFormValues) => {\r\n-    setIsLoading(true);\r\n+  setIsLoading(true);\r\n \r\n-    try {\r\n-      const { data, error } = await supabase.auth.signInWithPassword({\r\n-        email: values.email,\r\n-        password: values.password,\r\n+  try {\r\n+    const { data, error } = await supabase.auth.signInWithPassword({\r\n+      email: values.email,\r\n+      password: values.password,\r\n+    });\r\n+\r\n+    if (error) {\r\n+      toast.error('Erreur de connexion', {\r\n+        description: error.message\r\n       });\r\n+      return;\r\n+    }\r\n \r\n-      if (error) {\r\n-        toast.error(\"Erreur de connexion\", {\r\n-          description: error.message,\r\n-        });\r\n-        return;\r\n-      }\r\n+    // ✅ Empêcher la connexion si le compte est désactivé\r\n+    const { data: profileData } = await supabase\r\n+      .from(\"profiles\")\r\n+      .select(\"deleted_at\")\r\n+      .eq(\"id\", data.user.id)\r\n+      .single();\r\n \r\n-      if (data.user) {\r\n-        toast.success(\"Connexion réussie\", {\r\n-          description: \"Bienvenue sur Lys&Co!\",\r\n-        });\r\n+    if (profileData?.deleted_at) {\r\n+      toast.error(\"Votre compte est désactivé.\");\r\n+      await supabase.auth.signOut();\r\n+      return;\r\n+    }\r\n \r\n-        // Redirection après connexion réussie\r\n-        if (redirectUrl) {\r\n-          navigate(redirectUrl);\r\n-        } else {\r\n-          navigate(\"/dashboard\");\r\n-        }\r\n+    // ✅ Redirection\r\n+    if (data.user) {\r\n+      toast.success('Connexion réussie', {\r\n+        description: 'Bienvenue sur Lys&Co!'\r\n+      });\r\n+\r\n+      if (redirectUrl) {\r\n+        navigate(redirectUrl);\r\n+      } else {\r\n+        navigate('/dashboard');\r\n       }\r\n-    } catch (error) {\r\n-      console.error(\"Login error:\", error);\r\n-      toast.error(\"Une erreur inattendue est survenue\");\r\n-    } finally {\r\n-      setIsLoading(false);\r\n     }\r\n-  };\r\n \r\n+  } catch (error) {\r\n+    console.error('Login error:', error);\r\n+    toast.error('Une erreur inattendue est survenue');\r\n+  } finally {\r\n+    setIsLoading(false);\r\n+  }\r\n+};\r\n+\r\n   const handleResetPassword = async () => {\r\n     const email = form.getValues(\"email\");\r\n     if (!email) {\r\n       toast.error(\"Email requis\", {\r\n"
                }
            ],
            "date": 1751277285961,
            "name": "Commit-0",
            "content": "\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Eye, EyeOff, Mail, Lock } from 'lucide-react';\r\nimport Navbar from '@/components/Navbar';\r\nimport Footer from '@/components/Footer';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { toast } from '@/components/ui/sonner';\r\nimport { z } from 'zod';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { Form, FormControl, FormField, FormItem, FormMessage } from '@/components/ui/form';\r\n\r\nconst loginSchema = z.object({\r\n  email: z.string().email(\"Adresse email invalide\"),\r\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\r\n});\r\n\r\ntype LoginFormValues = z.infer<typeof loginSchema>;\r\n\r\nconst Login: React.FC = () => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const form = useForm<LoginFormValues>({\r\n    resolver: zodResolver(loginSchema),\r\n    defaultValues: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n  });\r\n\r\n  // Récupérer le paramètre redirect de l'URL\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const redirectUrl = searchParams.get('redirect');\r\n\r\n  // Rediriger si déjà connecté\r\n  useEffect(() => {\r\n    const checkSession = async () => {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (session) {\r\n        if (redirectUrl) {\r\n          navigate(redirectUrl);\r\n        } else {\r\n          navigate('/dashboard');\r\n        }\r\n      }\r\n    };\r\n    \r\n    checkSession();\r\n  }, [navigate, redirectUrl]);\r\n\r\n  const handleLogin = async (values: LoginFormValues) => {\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      const { data, error } = await supabase.auth.signInWithPassword({\r\n        email: values.email,\r\n        password: values.password,\r\n      });\r\n\r\n      if (error) {\r\n        toast.error('Erreur de connexion', {\r\n          description: error.message\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (data.user) {\r\n        toast.success('Connexion réussie', {\r\n          description: 'Bienvenue sur Lys&Co!'\r\n        });\r\n        \r\n        // Redirection après connexion réussie\r\n        if (redirectUrl) {\r\n          navigate(redirectUrl);\r\n        } else {\r\n          navigate('/dashboard');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      toast.error('Une erreur inattendue est survenue');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  const { data: profileData } = await supabase\r\n  .from(\"profiles\")\r\n  .select(\"deleted_at\")\r\n  .eq(\"id\", data.user.id)\r\n  .single();\r\n\r\nif (profileData?.deleted_at) {\r\n  toast.error(\"Votre compte est désactivé.\");\r\n  await supabase.auth.signOut();\r\n  return;\r\n}\r\n\r\n\r\n  const handleResetPassword = async () => {\r\n    const email = form.getValues('email');\r\n    if (!email) {\r\n      toast.error('Email requis', {\r\n        description: 'Veuillez entrer votre email pour réinitialiser votre mot de passe'\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n        redirectTo: `${window.location.origin}/reset-password`,\r\n      });\r\n\r\n      if (error) {\r\n        toast.error('Erreur', {\r\n          description: error.message\r\n        });\r\n        return;\r\n      }\r\n\r\n      toast.success('Email envoyé', {\r\n        description: 'Veuillez vérifier votre boîte mail pour réinitialiser votre mot de passe'\r\n      });\r\n    } catch (error) {\r\n      console.error('Reset password error:', error);\r\n      toast.error('Une erreur inattendue est survenue');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen\">\r\n      <Navbar />\r\n      \r\n      <main className=\"flex-1 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray-50\">\r\n        <Card className=\"w-full max-w-md\">\r\n          <CardHeader className=\"space-y-1\">\r\n            <CardTitle className=\"text-2xl font-bold text-center\">Connexion</CardTitle>\r\n            <CardDescription className=\"text-center\">\r\n              Entrez vos identifiants pour accéder à votre compte\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <Form {...form}>\r\n              <form onSubmit={form.handleSubmit(handleLogin)} className=\"space-y-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <Label htmlFor=\"email\">Email</Label>\r\n                      <div className=\"relative\">\r\n                        <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\r\n                        <FormControl>\r\n                          <Input \r\n                            id=\"email\" \r\n                            type=\"email\" \r\n                            placeholder=\"exemple@email.com\" \r\n                            className=\"pl-10\"\r\n                            {...field}\r\n                          />\r\n                        </FormControl>\r\n                      </div>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"password\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <Label htmlFor=\"password\">Mot de passe</Label>\r\n                        <button \r\n                          type=\"button\"\r\n                          onClick={handleResetPassword}\r\n                          className=\"text-xs text-lysco-turquoise hover:underline\"\r\n                        >\r\n                          Mot de passe oublié?\r\n                        </button>\r\n                      </div>\r\n                      <div className=\"relative\">\r\n                        <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\r\n                        <FormControl>\r\n                          <Input \r\n                            id=\"password\" \r\n                            type={showPassword ? \"text\" : \"password\"} \r\n                            className=\"pl-10 pr-10\"\r\n                            {...field}\r\n                          />\r\n                        </FormControl>\r\n                        <button \r\n                          type=\"button\" \r\n                          onClick={() => setShowPassword(!showPassword)}\r\n                          className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\r\n                        >\r\n                          {showPassword ? (\r\n                            <EyeOff className=\"h-4 w-4\" />\r\n                          ) : (\r\n                            <Eye className=\"h-4 w-4\" />\r\n                          )}\r\n                        </button>\r\n                      </div>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <Button \r\n                  type=\"submit\" \r\n                  className=\"w-full bg-lysco-turquoise hover:bg-opacity-90\"\r\n                  disabled={isLoading}\r\n                >\r\n                  {isLoading ? 'Connexion en cours...' : 'Se connecter'}\r\n                </Button>\r\n              </form>\r\n            </Form>\r\n          </CardContent>\r\n          <CardFooter className=\"flex flex-col space-y-4\">\r\n            <div className=\"text-center text-sm\">\r\n              Pas encore de compte?{' '}\r\n              <Link to=\"/register\" className=\"text-lysco-pink hover:underline\">\r\n                Créer un compte\r\n              </Link>\r\n            </div>\r\n          </CardFooter>\r\n        </Card>\r\n      </main>\r\n      \r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"
        }
    ]
}