{
    "sourceFile": "src/pages/DemandeDevis.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748535767098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748536352497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,19 +43,17 @@\n       message: \"\"\r\n     }\r\n   });\r\n \r\n-  const onSubmit = async (data: FormValues) => {\r\n-    const formData = new FormData();\r\n-    Object.entries(data).forEach(([key, value]) => {\r\n-      formData.append(key, value || '');\r\n+const onSubmit = async (data: FormValues) => {\r\n+  try {\r\n+    const response = await fetch('https://mon-backend-node.vercel.app/api/send-contact', {\r\n+      method: 'POST',\r\n+      headers: {\r\n+        'Content-Type': 'application/json'\r\n+      },\r\n+      body: JSON.stringify(data),\r\n     });\r\n-    \r\n-    try {\r\n-      const response = await fetch('https://mon-backend-node.vercel.app/api/send-contact', {\r\n-        method: 'POST',\r\n-        body: formData,\r\n-      });\r\n       \r\n       const result = await response.text();\r\n       if (result === 'success') {\r\n         toast({\r\n"
                },
                {
                    "date": 1748536606086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,48 +65,48 @@\n       message: \"\",\r\n     },\r\n   });\r\n \r\n-  const onSubmit = async (data: FormValues) => {\r\n-    try {\r\n-      const response = await fetch(\r\n-        \"https://mon-backend-node.vercel.app/api/send-contact\",\r\n-        {\r\n-          method: \"POST\",\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-          },\r\n-          body: JSON.stringify(data),\r\n-        }\r\n-      );\r\n+const onSubmit = async (data: FormValues) => {\r\n+  try {\r\n+    const response = await fetch(\r\n+      \"https://mon-backend-node.vercel.app/api/send-contact\",\r\n+      {\r\n+        method: \"POST\",\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify(data),\r\n+      }\r\n+    );\r\n \r\n-      const result = await response.text();\r\n-      if (result === \"success\") {\r\n-        toast({\r\n-          title: \"Demande envoyée\",\r\n-          description:\r\n-            \"Votre demande de devis a été envoyée avec succès. Nous vous contacterons dans les plus brefs délais.\",\r\n-          variant: \"default\",\r\n-        });\r\n-        form.reset();\r\n-      } else {\r\n-        toast({\r\n-          title: \"Erreur\",\r\n-          description:\r\n-            \"Une erreur est survenue lors de l'envoi de la demande. Veuillez réessayer plus tard.\",\r\n-          variant: \"destructive\",\r\n-        });\r\n-      }\r\n-    } catch (error) {\r\n-      console.error(\"Erreur:\", error);\r\n+    const result = await response.json();\r\n+    if (result.status === \"success\") {\r\n       toast({\r\n-        title: \"Erreur de connexion\",\r\n+        title: \"Demande envoyée\",\r\n         description:\r\n-          \"Impossible de se connecter au serveur. Veuillez vérifier votre connexion et réessayer.\",\r\n+          \"Votre demande de devis a été envoyée avec succès. Nous vous contacterons dans les plus brefs délais.\",\r\n+        variant: \"default\",\r\n+      });\r\n+      form.reset();\r\n+    } else {\r\n+      toast({\r\n+        title: \"Erreur\",\r\n+        description:\r\n+          \"Une erreur est survenue lors de l'envoi de la demande. Veuillez réessayer plus tard.\",\r\n         variant: \"destructive\",\r\n       });\r\n     }\r\n-  };\r\n+  } catch (error) {\r\n+    console.error(\"Erreur:\", error);\r\n+    toast({\r\n+      title: \"Erreur de connexion\",\r\n+      description:\r\n+        \"Impossible de se connecter au serveur. Veuillez vérifier votre connexion et réessayer.\",\r\n+      variant: \"destructive\",\r\n+    });\r\n+  }\r\n+};\r\n \r\n   return (\r\n     <div className=\"min-h-screen flex flex-col\">\r\n       <Navbar />\r\n"
                }
            ],
            "date": 1748535767097,
            "name": "Commit-0",
            "content": "\r\nimport React from 'react';\r\nimport Navbar from '@/components/Navbar';\r\nimport Footer from '@/components/Footer';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { z } from 'zod';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\nimport { Toaster } from \"@/components/ui/toaster\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\n\r\nconst formSchema = z.object({\r\n  firstName: z.string().min(2, { message: \"Le prénom doit contenir au moins 2 caractères\" }),\r\n  lastName: z.string().min(2, { message: \"Le nom doit contenir au moins 2 caractères\" }),\r\n  email: z.string().email({ message: \"Adresse email invalide\" }),\r\n  phone: z.string().min(10, { message: \"Numéro de téléphone invalide\" }),\r\n  company: z.string().optional(),\r\n  serviceType: z.string().min(1, { message: \"Veuillez sélectionner un type de service\" }),\r\n  budget: z.string().optional(),\r\n  message: z.string().min(10, { message: \"Veuillez décrire votre besoin en au moins 10 caractères\" })\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\nconst DemandeDevis = () => {\r\n  const { toast } = useToast();\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      company: \"\",\r\n      serviceType: \"\",\r\n      budget: \"\",\r\n      message: \"\"\r\n    }\r\n  });\r\n\r\n  const onSubmit = async (data: FormValues) => {\r\n    const formData = new FormData();\r\n    Object.entries(data).forEach(([key, value]) => {\r\n      formData.append(key, value || '');\r\n    });\r\n    \r\n    try {\r\n      const response = await fetch('https://mon-backend-node.vercel.app/api/send-contact', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n      \r\n      const result = await response.text();\r\n      if (result === 'success') {\r\n        toast({\r\n          title: \"Demande envoyée\",\r\n          description: \"Votre demande de devis a été envoyée avec succès. Nous vous contacterons dans les plus brefs délais.\",\r\n          variant: \"default\",\r\n        });\r\n        form.reset();\r\n      } else {\r\n        toast({\r\n          title: \"Erreur\",\r\n          description: \"Une erreur est survenue lors de l'envoi de la demande. Veuillez réessayer plus tard.\",\r\n          variant: \"destructive\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur:', error);\r\n      toast({\r\n        title: \"Erreur de connexion\",\r\n        description: \"Impossible de se connecter au serveur. Veuillez vérifier votre connexion et réessayer.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col\">\r\n      <Navbar />\r\n      <main className=\"flex-1\">\r\n        {/* Hero Section */}\r\n        <section className=\"bg-gradient-to-r from-lysco-turquoise/10 to-lysco-pink/10 py-16\">\r\n          <div className=\"container mx-auto px-4\">\r\n            <div className=\"max-w-3xl mx-auto text-center\">\r\n              <h1 className=\"text-4xl md:text-5xl font-bold mb-6\">Demande de devis</h1>\r\n              <p className=\"text-xl text-gray-600 mb-8\">\r\n                Obtenez un devis personnalisé pour votre projet. Nous vous répondrons dans les plus brefs délais.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        {/* Devis Form Section */}\r\n        <section className=\"py-16\">\r\n          <div className=\"container mx-auto px-4 max-w-3xl\">\r\n            <Card>\r\n              <CardContent className=\"p-6\">\r\n                <Form {...form}>\r\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"firstName\"\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Prénom</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"Votre prénom\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"lastName\"\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Nom</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"Votre nom\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"email\"\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Email</FormLabel>\r\n                            <FormControl>\r\n                              <Input type=\"email\" placeholder=\"votre@email.com\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"phone\"\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Téléphone</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"Votre numéro de téléphone\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                    </div>\r\n\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"company\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>Entreprise (optionnel)</FormLabel>\r\n                          <FormControl>\r\n                            <Input placeholder=\"Nom de votre entreprise\" {...field} />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"serviceType\"\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Type de service</FormLabel>\r\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                              <FormControl>\r\n                                <SelectTrigger>\r\n                                  <SelectValue placeholder=\"Sélectionnez un service\" />\r\n                                </SelectTrigger>\r\n                              </FormControl>\r\n                              <SelectContent>\r\n                                <SelectItem value=\"domiciliation\">Domiciliation</SelectItem>\r\n                                <SelectItem value=\"communication\">Communication</SelectItem>\r\n                                <SelectItem value=\"administratif\">Services administratifs</SelectItem>\r\n                                <SelectItem value=\"autre\">Autre</SelectItem>\r\n                              </SelectContent>\r\n                            </Select>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"budget\"\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Budget approximatif (optionnel)</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"Votre budget en €\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                    </div>\r\n\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"message\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>Description de votre projet</FormLabel>\r\n                          <FormControl>\r\n                            <Textarea \r\n                              placeholder=\"Décrivez votre besoin en détail...\" \r\n                              className=\"min-h-[150px]\"\r\n                              {...field}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n\r\n                    <Button \r\n                      type=\"submit\" \r\n                      className=\"w-full bg-lysco-turquoise hover:bg-opacity-90\"\r\n                      disabled={form.formState.isSubmitting}\r\n                    >\r\n                      {form.formState.isSubmitting ? \"Envoi en cours...\" : \"Demander un devis\"}\r\n                    </Button>\r\n                  </form>\r\n                </Form>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </section>\r\n      </main>\r\n      <Footer />\r\n      <Toaster />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DemandeDevis;\r\n"
        }
    ]
}