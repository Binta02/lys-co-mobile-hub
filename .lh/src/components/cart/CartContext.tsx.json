{
    "sourceFile": "src/components/cart/CartContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1751530178302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751532461975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n+\r\n import React, { createContext, useContext, useEffect, useState } from \"react\";\r\n \r\n export interface CartItem {\r\n   id: string;\r\n   title: string;\r\n   price: number;\r\n   quantity: number;\r\n-  period?: string; // Optionnel, pour les abonnements\r\n+  // period?: string; // Optionnel, pour les abonnements\r\n }\r\n \r\n interface CartContextType {\r\n   items: CartItem[];\r\n@@ -52,9 +53,11 @@\n     if (quantity <= 0) {\r\n       removeItem(id);\r\n     } else {\r\n       setItems((prev) =>\r\n-        prev.map((item) => (item.id === id ? { ...item, quantity } : item))\r\n+        prev.map((item) =>\r\n+          item.id === id ? { ...item, quantity } : item\r\n+        )\r\n       );\r\n     }\r\n   };\r\n \r\n@@ -63,32 +66,18 @@\n     localStorage.removeItem(\"lysco-cart\");\r\n   };\r\n \r\n   // Calcul des différents montants\r\n-  const subtotal = items.reduce(\r\n-    (acc, item) => acc + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n+  const subtotal = items.reduce((acc, item) => acc + item.price * item.quantity, 0);\r\n+  \r\n   // Calcul de la TVA (20% en France)\r\n-  const tax = subtotal * 0.2;\r\n-\r\n+  const tax = subtotal * 0.2; \r\n+  \r\n   // Total incluant les taxes\r\n   const total = subtotal + tax;\r\n \r\n   return (\r\n-    <CartContext.Provider\r\n-      value={{\r\n-        items,\r\n-        addItem,\r\n-        removeItem,\r\n-        updateQuantity,\r\n-        clearCart,\r\n-        total,\r\n-        subtotal,\r\n-        tax,\r\n-      }}\r\n-    >\r\n+    <CartContext.Provider value={{ items, addItem, removeItem, updateQuantity, clearCart, total, subtotal, tax }}>\r\n       {children}\r\n     </CartContext.Provider>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1751533331137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n+\r\n import React, { createContext, useContext, useEffect, useState } from \"react\";\r\n \r\n export interface CartItem {\r\n   id: string;\r\n   title: string;\r\n   price: number;\r\n   quantity: number;\r\n-  // period?: string; // Optionnel, pour les abonnements\r\n }\r\n \r\n interface CartContextType {\r\n   items: CartItem[];\r\n@@ -52,9 +52,11 @@\n     if (quantity <= 0) {\r\n       removeItem(id);\r\n     } else {\r\n       setItems((prev) =>\r\n-        prev.map((item) => (item.id === id ? { ...item, quantity } : item))\r\n+        prev.map((item) =>\r\n+          item.id === id ? { ...item, quantity } : item\r\n+        )\r\n       );\r\n     }\r\n   };\r\n \r\n@@ -63,32 +65,18 @@\n     localStorage.removeItem(\"lysco-cart\");\r\n   };\r\n \r\n   // Calcul des différents montants\r\n-  const subtotal = items.reduce(\r\n-    (acc, item) => acc + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n+  const subtotal = items.reduce((acc, item) => acc + item.price * item.quantity, 0);\r\n+  \r\n   // Calcul de la TVA (20% en France)\r\n-  const tax = subtotal * 0.2;\r\n-\r\n+  const tax = subtotal * 0.2; \r\n+  \r\n   // Total incluant les taxes\r\n   const total = subtotal + tax;\r\n \r\n   return (\r\n-    <CartContext.Provider\r\n-      value={{\r\n-        items,\r\n-        addItem,\r\n-        removeItem,\r\n-        updateQuantity,\r\n-        clearCart,\r\n-        total,\r\n-        subtotal,\r\n-        tax,\r\n-      }}\r\n-    >\r\n+    <CartContext.Provider value={{ items, addItem, removeItem, updateQuantity, clearCart, total, subtotal, tax }}>\r\n       {children}\r\n     </CartContext.Provider>\r\n   );\r\n };\r\n"
                }
            ],
            "date": 1751530178302,
            "name": "Commit-0",
            "content": "\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\n\r\nexport interface CartItem {\r\n  id: string;\r\n  title: string;\r\n  price: number;\r\n  quantity: number;\r\n  period?: string; // Optionnel, pour les abonnements\r\n}\r\n\r\ninterface CartContextType {\r\n  items: CartItem[];\r\n  total: number;\r\n  subtotal: number;\r\n  tax: number;\r\n  addItem: (item: CartItem) => void;\r\n  removeItem: (id: string) => void;\r\n  updateQuantity: (id: string, quantity: number) => void;\r\n  clearCart: () => void;\r\n}\r\n\r\nconst CartContext = createContext<CartContextType | undefined>(undefined);\r\n\r\nexport const CartProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [items, setItems] = useState<CartItem[]>(() => {\r\n    const saved = localStorage.getItem(\"lysco-cart\");\r\n    return saved ? JSON.parse(saved) : [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"lysco-cart\", JSON.stringify(items));\r\n  }, [items]);\r\n\r\n  const addItem = (item: CartItem) => {\r\n    setItems((prev) => {\r\n      const existing = prev.find((i) => i.id === item.id);\r\n      if (existing) {\r\n        return prev.map((i) =>\r\n          i.id === item.id ? { ...i, quantity: i.quantity + item.quantity } : i\r\n        );\r\n      } else {\r\n        return [...prev, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  const removeItem = (id: string) => {\r\n    setItems((prev) => prev.filter((item) => item.id !== id));\r\n  };\r\n\r\n  const updateQuantity = (id: string, quantity: number) => {\r\n    if (quantity <= 0) {\r\n      removeItem(id);\r\n    } else {\r\n      setItems((prev) =>\r\n        prev.map((item) =>\r\n          item.id === id ? { ...item, quantity } : item\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const clearCart = () => {\r\n    setItems([]);\r\n    localStorage.removeItem(\"lysco-cart\");\r\n  };\r\n\r\n  // Calcul des différents montants\r\n  const subtotal = items.reduce((acc, item) => acc + item.price * item.quantity, 0);\r\n  \r\n  // Calcul de la TVA (20% en France)\r\n  const tax = subtotal * 0.2; \r\n  \r\n  // Total incluant les taxes\r\n  const total = subtotal + tax;\r\n\r\n  return (\r\n    <CartContext.Provider value={{ items, addItem, removeItem, updateQuantity, clearCart, total, subtotal, tax }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) throw new Error(\"useCart must be used within a CartProvider\");\r\n  return context;\r\n};\r\n"
        }
    ]
}