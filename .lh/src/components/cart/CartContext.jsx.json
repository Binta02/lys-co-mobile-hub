{
    "sourceFile": "src/components/cart/CartContext.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745482333904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745482333904,
            "name": "Commit-0",
            "content": "import React, { createContext, useContext, useState } from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';\r\nimport { Minus, Plus, ShoppingCart, Trash } from 'lucide-react';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  const addToCart = (item) => {\r\n    setCartItems((prevItems) => {\r\n      const existingItem = prevItems.find((i) => i.id === item.id);\r\n      if (existingItem) {\r\n        return prevItems.map((i) =>\r\n          i.id === item.id ? { ...i, quantity: i.quantity + 1 } : i\r\n        );\r\n      }\r\n      return [...prevItems, { ...item, quantity: 1 }];\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (id) => {\r\n    setCartItems((prevItems) => prevItems.filter((item) => item.id !== id));\r\n  };\r\n\r\n  const updateQuantity = (id, quantity) => {\r\n    setCartItems((prevItems) =>\r\n      prevItems.map((item) =>\r\n        item.id === id ? { ...item, quantity: Math.max(1, quantity) } : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const clearCart = () => setCartItems([]);\r\n\r\n  const total = cartItems.reduce(\r\n    (sum, item) => sum + item.price * item.quantity,\r\n    0\r\n  );\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{ cartItems, addToCart, removeFromCart, updateQuantity, clearCart, total }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCart = () => useContext(CartContext);\r\n\r\nexport function CartDrawer() {\r\n  const { cartItems, removeFromCart, updateQuantity, total } = useCart();\r\n\r\n  return (\r\n    <Sheet>\r\n      <SheetTrigger asChild>\r\n        <Button variant=\"outline\" size=\"icon\" className=\"relative\">\r\n          <ShoppingCart className=\"h-4 w-4\" />\r\n          {cartItems.length > 0 && (\r\n            <Badge\r\n              className=\"absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center p-0 text-xs\"\r\n              variant=\"destructive\"\r\n            >\r\n              {cartItems.length}\r\n            </Badge>\r\n          )}\r\n        </Button>\r\n      </SheetTrigger>\r\n      <SheetContent className=\"w-[400px] sm:w-[540px]\">\r\n        <SheetHeader>\r\n          <SheetTitle>Votre panier</SheetTitle>\r\n        </SheetHeader>\r\n        <div className=\"mt-8 space-y-4\">\r\n          {cartItems.length === 0 ? (\r\n            <p className=\"text-center text-gray-500\">Votre panier est vide</p>\r\n          ) : (\r\n            <>\r\n              {cartItems.map((item) => (\r\n                <div key={item.id} className=\"flex items-center justify-between border-b pb-4\">\r\n                  <div className=\"space-y-1\">\r\n                    <p className=\"font-medium\">{item.title}</p>\r\n                    <p className=\"text-sm text-gray-500\">{item.price} €</p>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"icon\"\r\n                      className=\"h-8 w-8\"\r\n                      onClick={() => updateQuantity(item.id, item.quantity - 1)}\r\n                    >\r\n                      <Minus className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <span className=\"w-8 text-center\">{item.quantity}</span>\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"icon\"\r\n                      className=\"h-8 w-8\"\r\n                      onClick={() => updateQuantity(item.id, item.quantity + 1)}\r\n                    >\r\n                      <Plus className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"icon\"\r\n                      className=\"h-8 w-8 text-red-500\"\r\n                      onClick={() => removeFromCart(item.id)}\r\n                    >\r\n                      <Trash className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              <div className=\"pt-4\">\r\n                <div className=\"flex justify-between font-medium\">\r\n                  <span>Total</span>\r\n                  <span>{total.toFixed(2)} €</span>\r\n                </div>\r\n                <Button className=\"w-full mt-4 bg-lysco-turquoise hover:bg-lysco-turquoise/90\">\r\n                  Passer la commande\r\n                </Button>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </SheetContent>\r\n    </Sheet>\r\n  );\r\n}\r\n"
        }
    ]
}