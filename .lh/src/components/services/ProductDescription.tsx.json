{
    "sourceFile": "src/components/services/ProductDescription.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1749126385256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1749126385256,
            "name": "Commit-0",
            "content": "\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport ReviewForm from './ReviewForm';\r\nimport ReviewsList from './ReviewsList';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n} from \"@/components/ui/alert-dialog\";\r\n\r\nconst ProductDescription = () => {\r\n  const [productName, setProductName] = useState(\"\");\r\n  const [productId, setProductId] = useState(\"\");\r\n  const [reviews, setReviews] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const { toast } = useToast();\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\r\n  const location = useLocation();\r\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\r\n  const [reviewToDelete, setReviewToDelete] = useState<string | null>(null);\r\n\r\n  // Fonction pour déterminer le nom et l'ID du produit en fonction de l'URL\r\n  const determineProductInfo = () => {\r\n    const path = location.pathname;\r\n    let name = '';\r\n    let id = '';\r\n    \r\n    if (path.includes('/domiciliation/3-mois-entreprise')) {\r\n      name = 'Domiciliation 3 mois – Entreprise';\r\n      id = 'domiciliation-3mois-entreprise';\r\n    } else if (path.includes('/domiciliation/3-mois-micro-entreprise')) {\r\n      name = 'Domiciliation 3 mois – Micro Entreprise';\r\n      id = 'domiciliation-3mois-micro';\r\n    } else if (path.includes('/domiciliation/6-mois-entreprise')) {\r\n      name = 'Domiciliation 6 mois – Entreprise';\r\n      id = 'domiciliation-6mois-entreprise';\r\n    } else if (path.includes('/domiciliation/6-mois-micro-entreprise')) {\r\n      name = 'Domiciliation 6 mois – Micro Entreprise';\r\n      id = 'domiciliation-6mois-micro';\r\n    } else if (path.includes('/domiciliation/1-an-entreprise')) {\r\n      name = 'Domiciliation 1 an – Entreprise';\r\n      id = 'domiciliation-1an-entreprise';\r\n    } else if (path.includes('/domiciliation/pack-domicilie')) {\r\n      name = 'Pack domicilié';\r\n      id = 'pack-domicilie';\r\n    } else {\r\n      // Fallback pour les autres pages\r\n      const pathParts = path.split('/');\r\n      const lastPart = pathParts[pathParts.length - 1];\r\n      name = lastPart.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\r\n      id = lastPart;\r\n    }\r\n    \r\n    return { name, id };\r\n  };\r\n\r\n  // Fonction pour charger les avis\r\n  const fetchReviews = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const { name, id } = determineProductInfo();\r\n      \r\n      if (!id) return;\r\n\r\n      // First, fetch reviews without joining profiles\r\n      const { data, error } = await supabase\r\n        .from('reviews')\r\n        .select('*')\r\n        .eq('product_id', id)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      \r\n      // Then for each review, fetch the profile separately if needed\r\n      const formattedReviews = await Promise.all(data.map(async (review) => {\r\n        let userName = 'Client';\r\n        \r\n        if (review.user_id) {\r\n          // const { data: profileData, error: profileError } = await supabase\r\n          //   .from('profiles')\r\n          //   .select('first_name, last_name')\r\n          //   .eq('id', review.user_id)\r\n          //   .single();\r\n            const { data: profileData, error: profileError } = await supabase\r\n            .from(\"profiles_public\")\r\n            .select(\"first_name, last_name\")\r\n            .eq(\"id\", review.user_id)\r\n            .single();\r\n          \r\n          if (!profileError && profileData) {\r\n            const firstName = profileData.first_name || '';\r\n            const lastName = profileData.last_name || '';\r\n            if (firstName || lastName) {\r\n              userName = `${firstName} ${lastName}`.trim();\r\n            }\r\n          }\r\n        }\r\n        \r\n        return {\r\n          ...review,\r\n          user_name: userName\r\n        };\r\n      }));\r\n      \r\n      setReviews(formattedReviews);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des avis:', error);\r\n      toast({\r\n        title: \"Erreur\",\r\n        description: \"Impossible de charger les avis\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fonction pour supprimer un avis\r\n  const handleDeleteReview = async (reviewId: string) => {\r\n    setReviewToDelete(reviewId);\r\n    setIsDeleteDialogOpen(true);\r\n  };\r\n\r\n  // Fonction pour confirmer la suppression d'un avis\r\n  const confirmDeleteReview = async () => {\r\n    if (!reviewToDelete) return;\r\n    \r\n    try {\r\n      const { error } = await supabase\r\n        .from('reviews')\r\n        .delete()\r\n        .eq('id', reviewToDelete)\r\n        .eq('user_id', currentUserId); // S'assurer que l'utilisateur ne peut supprimer que ses propres avis\r\n      \r\n      if (error) throw error;\r\n      \r\n      toast({\r\n        title: \"Avis supprimé\",\r\n        description: \"Votre avis a été supprimé avec succès\",\r\n      });\r\n      \r\n      // Recharger les avis après la suppression\r\n      fetchReviews();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression de l\\'avis:', error);\r\n      toast({\r\n        title: \"Erreur\",\r\n        description: \"Impossible de supprimer l'avis\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsDeleteDialogOpen(false);\r\n      setReviewToDelete(null);\r\n    }\r\n  };\r\n\r\n  // Vérifier si l'utilisateur est connecté\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      const { data } = await supabase.auth.getSession();\r\n      setIsLoggedIn(!!data.session);\r\n      setCurrentUserId(data.session?.user?.id || null);\r\n    };\r\n\r\n    checkAuthStatus();\r\n\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\r\n      setIsLoggedIn(!!session);\r\n      setCurrentUserId(session?.user?.id || null);\r\n    });\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  // Charger les détails du produit et les avis\r\n  useEffect(() => {\r\n    const { name, id } = determineProductInfo();\r\n    setProductName(name);\r\n    setProductId(id);\r\n    \r\n    fetchReviews();\r\n  }, [location.pathname]);\r\n\r\n  const handleReviewSubmitted = () => {\r\n    fetchReviews();\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-16\">\r\n      <Card>\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"mb-8\">\r\n            <h3 className=\"text-xl font-semibold mb-4\">Avis ({reviews.length})</h3>\r\n            <ReviewsList \r\n              reviews={reviews} \r\n              isLoading={isLoading} \r\n              currentUserId={currentUserId}\r\n              onDeleteReview={handleDeleteReview}\r\n            />\r\n          </div>\r\n          \r\n          {isLoggedIn ? (\r\n            <div className=\"mt-8 border-t pt-6\">\r\n              <ReviewForm \r\n                productName={productName}\r\n                productId={productId} \r\n                onReviewSubmitted={handleReviewSubmitted} \r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className=\"mt-8 border-t pt-6 text-center\">\r\n              <p className=\"text-gray-600\">Vous devez être connecté pour laisser un avis.</p>\r\n              <Button \r\n                className=\"mt-4 bg-lysco-turquoise hover:bg-lysco-turquoise/90\" \r\n                asChild\r\n              >\r\n                <Link to={`/login?redirect=${encodeURIComponent(location.pathname)}`}>Se connecter</Link>\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Boîte de dialogue de confirmation pour la suppression d'un avis */}\r\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>Confirmer la suppression</AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              Êtes-vous sûr de vouloir supprimer cet avis ? Cette action est irréversible.\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel>Annuler</AlertDialogCancel>\r\n            <AlertDialogAction\r\n              onClick={confirmDeleteReview}\r\n              className=\"bg-red-500 hover:bg-red-600\"\r\n            >\r\n              Supprimer\r\n            </AlertDialogAction>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductDescription;\r\n"
        }
    ]
}