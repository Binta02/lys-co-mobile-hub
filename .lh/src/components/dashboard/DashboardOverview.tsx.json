{
    "sourceFile": "src/components/dashboard/DashboardOverview.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1747586141966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747586240009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,21 +7,21 @@\n // import { fr } from 'date-fns/locale';\r\n // import ProfileEditForm from './ProfileEditForm';\r\n \r\n // const DashboardOverview = () => {\r\n-//   const { \r\n-//     profile, \r\n-//     domiciliation, \r\n+//   const {\r\n+//     profile,\r\n+//     domiciliation,\r\n //     userServices,\r\n-//     mails, \r\n-//     notifications, \r\n-//     activities, \r\n+//     mails,\r\n+//     notifications,\r\n+//     activities,\r\n //     loading,\r\n //     updateProfile,\r\n //     markMailAsRead,\r\n //     markNotificationAsRead\r\n //   } = useUserData();\r\n-  \r\n+\r\n //   const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n \r\n //   if (loading) {\r\n //     return (\r\n@@ -49,31 +49,31 @@\n //     try {\r\n //       const date = new Date(dateString);\r\n //       const now = new Date();\r\n //       const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));\r\n-      \r\n+\r\n //       if (diffInDays === 0) return \"Aujourd'hui\";\r\n //       if (diffInDays === 1) return \"Hier\";\r\n //       return format(date, 'dd/MM/yyyy', { locale: fr });\r\n //     } catch (e) {\r\n //       return dateString;\r\n //     }\r\n //   };\r\n-  \r\n+\r\n //   const handleMailClick = (mailId: string) => {\r\n //     markMailAsRead(mailId);\r\n //   };\r\n-  \r\n+\r\n //   const handleNotificationClick = (notificationId: string) => {\r\n //     markNotificationAsRead(notificationId);\r\n //   };\r\n \r\n //   if (isEditingProfile) {\r\n //     return (\r\n-//       <ProfileEditForm \r\n-//         profile={profile} \r\n-//         onUpdate={updateProfile} \r\n-//         onCancel={() => setIsEditingProfile(false)} \r\n+//       <ProfileEditForm\r\n+//         profile={profile}\r\n+//         onUpdate={updateProfile}\r\n+//         onCancel={() => setIsEditingProfile(false)}\r\n //       />\r\n //     );\r\n //   }\r\n \r\n@@ -192,12 +192,12 @@\n //           <div className=\"space-y-4\">\r\n //             {activities.map(activity => (\r\n //               <div key={activity.id} className=\"flex items-start gap-4 pb-4 border-b\">\r\n //                 <div className={`w-8 h-8 rounded-full ${\r\n-//                   activity.type === 'mail' \r\n-//                     ? 'bg-lysco-turquoise/10' \r\n-//                     : activity.type === 'document' \r\n-//                     ? 'bg-lysco-pink/10' \r\n+//                   activity.type === 'mail'\r\n+//                     ? 'bg-lysco-turquoise/10'\r\n+//                     : activity.type === 'document'\r\n+//                     ? 'bg-lysco-pink/10'\r\n //                     : 'bg-lysco-turquoise/10'\r\n //                 } flex items-center justify-center`}>\r\n //                   {activity.type === 'mail' && <Mail className=\"h-4 w-4 text-lysco-turquoise\" />}\r\n //                   {activity.type === 'document' && <FileText className=\"h-4 w-4 text-lysco-pink\" />}\r\n@@ -218,48 +218,49 @@\n // };\r\n \r\n // export default DashboardOverview;\r\n \r\n-\r\n // src/components/dashboard/DashboardOverview.tsx\r\n-import React, { useState } from 'react'\r\n-import { useQuery } from '@tanstack/react-query'\r\n+import React, { useState } from \"react\";\r\n+import { useQuery } from \"@tanstack/react-query\";\r\n import {\r\n   LineChart,\r\n   Line,\r\n   XAxis,\r\n   YAxis,\r\n   Tooltip,\r\n   ResponsiveContainer,\r\n-} from 'recharts'\r\n-import DatePicker from 'react-datepicker'\r\n-import { motion } from 'framer-motion'\r\n-import { fetchOverviewStats, Stat } from '@/integrations/api/dashboard'\r\n+} from \"recharts\";\r\n+import DatePicker from \"react-datepicker\";\r\n+import { motion } from \"framer-motion\";\r\n+import { fetchOverviewStats, Stat } from \"@/integrations/api/dashboard\";\r\n \r\n export default function DashboardOverview() {\r\n   // plage par défaut : 7 derniers jours\r\n   const [startDate, setStartDate] = useState<Date>(\r\n     new Date(new Date().setDate(new Date().getDate() - 7))\r\n-  )\r\n-  const [endDate, setEndDate] = useState<Date>(new Date())\r\n+  );\r\n+  const [endDate, setEndDate] = useState<Date>(new Date());\r\n \r\n   const {\r\n-    data = [],\r\n+    data,\r\n     isLoading,\r\n     error,\r\n     refetch,\r\n   } = useQuery<Stat[]>(\r\n-    ['overviewStats', startDate, endDate],\r\n+    [\"overviewStats\", startDate, endDate],\r\n     () => fetchOverviewStats(startDate, endDate),\r\n     {\r\n       refetchInterval: 1000 * 60 * 5, // toutes les 5 minutes\r\n       keepPreviousData: true,\r\n     }\r\n-  )\r\n+  );\r\n \r\n-  if (isLoading) return <div>Chargement des statistiques…</div>\r\n-  if (error) return <div>Impossible de charger les données.</div>\r\n+  const chartData: Stat[] = data ?? [];\r\n \r\n+  if (isLoading) return <div>Chargement des statistiques…</div>;\r\n+  if (error) return <div>Impossible de charger les données.</div>;\r\n+\r\n   return (\r\n     <motion.div\r\n       initial={{ opacity: 0, y: 20 }}\r\n       animate={{ opacity: 1, y: 0 }}\r\n@@ -270,10 +271,10 @@\n       <div className=\"flex items-center gap-4\">\r\n         <DatePicker\r\n           selected={startDate}\r\n           onChange={(date: Date) => {\r\n-            setStartDate(date)\r\n-            refetch()\r\n+            setStartDate(date);\r\n+            refetch();\r\n           }}\r\n           selectsStart\r\n           startDate={startDate}\r\n           endDate={endDate}\r\n@@ -281,10 +282,10 @@\n         />\r\n         <DatePicker\r\n           selected={endDate}\r\n           onChange={(date: Date) => {\r\n-            setEndDate(date)\r\n-            refetch()\r\n+            setEndDate(date);\r\n+            refetch();\r\n           }}\r\n           selectsEnd\r\n           startDate={startDate}\r\n           endDate={endDate}\r\n@@ -295,9 +296,9 @@\n \r\n       {/* Graphique */}\r\n       <div className=\"w-full h-80\">\r\n         <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n-          <LineChart data={data}>\r\n+          <LineChart data={chartData}>\r\n             <XAxis dataKey=\"date\" />\r\n             <YAxis />\r\n             <Tooltip />\r\n             <Line\r\n@@ -310,6 +311,6 @@\n           </LineChart>\r\n         </ResponsiveContainer>\r\n       </div>\r\n     </motion.div>\r\n-  )\r\n+  );\r\n }\r\n"
                },
                {
                    "date": 1747586344763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,14 +240,9 @@\n     new Date(new Date().setDate(new Date().getDate() - 7))\r\n   );\r\n   const [endDate, setEndDate] = useState<Date>(new Date());\r\n \r\n-  const {\r\n-    data,\r\n-    isLoading,\r\n-    error,\r\n-    refetch,\r\n-  } = useQuery<Stat[]>(\r\n+  const { data, isLoading, error, refetch } = useQuery<Stat[]>(\r\n     [\"overviewStats\", startDate, endDate],\r\n     () => fetchOverviewStats(startDate, endDate),\r\n     {\r\n       refetchInterval: 1000 * 60 * 5, // toutes les 5 minutes\r\n"
                },
                {
                    "date": 1747586355917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,16 +240,14 @@\n     new Date(new Date().setDate(new Date().getDate() - 7))\r\n   );\r\n   const [endDate, setEndDate] = useState<Date>(new Date());\r\n \r\n-  const { data, isLoading, error, refetch } = useQuery<Stat[]>(\r\n-    [\"overviewStats\", startDate, endDate],\r\n-    () => fetchOverviewStats(startDate, endDate),\r\n-    {\r\n-      refetchInterval: 1000 * 60 * 5, // toutes les 5 minutes\r\n-      keepPreviousData: true,\r\n-    }\r\n-  );\r\n+  const { data, isLoading, error, refetch } = useQuery<Stat[]>({\r\n+    queryKey: [\"overviewStats\", startDate, endDate],\r\n+    queryFn: () => fetchOverviewStats(startDate, endDate),\r\n+    refetchInterval: 1000 * 60 * 5, // toutes les 5 minutes\r\n+    keepPreviousData: true,\r\n+  });\r\n \r\n   const chartData: Stat[] = data ?? [];\r\n \r\n   if (isLoading) return <div>Chargement des statistiques…</div>;\r\n"
                },
                {
                    "date": 1747586396770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n   const { data, isLoading, error, refetch } = useQuery<Stat[]>({\r\n     queryKey: [\"overviewStats\", startDate, endDate],\r\n     queryFn: () => fetchOverviewStats(startDate, endDate),\r\n     refetchInterval: 1000 * 60 * 5, // toutes les 5 minutes\r\n-    keepPreviousData: true,\r\n+    // keepPreviousData: true, // <-- Supprimez cette ligne, non supportée dans votre version\r\n   });\r\n \r\n   const chartData: Stat[] = data ?? [];\r\n \r\n"
                }
            ],
            "date": 1747586141966,
            "name": "Commit-0",
            "content": "// import React, { useState } from 'react';\r\n// import { Button } from '@/components/ui/button';\r\n// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\n// import { Home, Mail, Bell, FileText, MessageCircle, User } from 'lucide-react';\r\n// import { useUserData } from '@/hooks/useUserData';\r\n// import { format } from 'date-fns';\r\n// import { fr } from 'date-fns/locale';\r\n// import ProfileEditForm from './ProfileEditForm';\r\n\r\n// const DashboardOverview = () => {\r\n//   const { \r\n//     profile, \r\n//     domiciliation, \r\n//     userServices,\r\n//     mails, \r\n//     notifications, \r\n//     activities, \r\n//     loading,\r\n//     updateProfile,\r\n//     markMailAsRead,\r\n//     markNotificationAsRead\r\n//   } = useUserData();\r\n  \r\n//   const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"flex items-center justify-center h-64\">\r\n//         <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-lysco-turquoise\"></div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // Filtrer les services par catégorie\r\n//   const domiciliationServices = userServices.filter(service => service.category === 'domiciliation');\r\n//   const adminServices = userServices.filter(service => service.category === 'admin');\r\n//   const marketingServices = userServices.filter(service => service.category === 'marketing');\r\n\r\n//   const formatDate = (dateString: string): string => {\r\n//     try {\r\n//       const date = new Date(dateString);\r\n//       return format(date, 'dd/MM/yyyy', { locale: fr });\r\n//     } catch (e) {\r\n//       return dateString;\r\n//     }\r\n//   };\r\n\r\n//   const getRelativeDate = (dateString: string): string => {\r\n//     try {\r\n//       const date = new Date(dateString);\r\n//       const now = new Date();\r\n//       const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));\r\n      \r\n//       if (diffInDays === 0) return \"Aujourd'hui\";\r\n//       if (diffInDays === 1) return \"Hier\";\r\n//       return format(date, 'dd/MM/yyyy', { locale: fr });\r\n//     } catch (e) {\r\n//       return dateString;\r\n//     }\r\n//   };\r\n  \r\n//   const handleMailClick = (mailId: string) => {\r\n//     markMailAsRead(mailId);\r\n//   };\r\n  \r\n//   const handleNotificationClick = (notificationId: string) => {\r\n//     markNotificationAsRead(notificationId);\r\n//   };\r\n\r\n//   if (isEditingProfile) {\r\n//     return (\r\n//       <ProfileEditForm \r\n//         profile={profile} \r\n//         onUpdate={updateProfile} \r\n//         onCancel={() => setIsEditingProfile(false)} \r\n//       />\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\r\n//         <Card className=\"col-span-1 lg:col-span-3\">\r\n//           <CardHeader className=\"pb-2\">\r\n//             <CardTitle className=\"text-lg flex items-center\">\r\n//               <User className=\"mr-2 h-5 w-5 text-lysco-turquoise\" />\r\n//               Mon Profil\r\n//             </CardTitle>\r\n//           </CardHeader>\r\n//           <CardContent>\r\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n//               <div>\r\n//                 <p className=\"text-sm text-gray-600\">\r\n//                   Nom: <span className=\"font-medium\">{profile?.first_name} {profile?.last_name}</span>\r\n//                 </p>\r\n//                 <p className=\"text-sm text-gray-600\">\r\n//                   Email: <span className=\"font-medium\">{profile?.email}</span>\r\n//                 </p>\r\n//               </div>\r\n//               <div>\r\n//                 <p className=\"text-sm text-gray-600\">\r\n//                   Entreprise: <span className=\"font-medium\">{profile?.company_name || 'Non renseigné'}</span>\r\n//                 </p>\r\n//                 <p className=\"text-sm text-gray-600\">\r\n//                   Téléphone: <span className=\"font-medium\">{profile?.phone || 'Non renseigné'}</span>\r\n//                 </p>\r\n//               </div>\r\n//             </div>\r\n//             <Button variant=\"outline\" size=\"sm\" onClick={() => setIsEditingProfile(true)}>\r\n//               Modifier mon profil\r\n//             </Button>\r\n//           </CardContent>\r\n//         </Card>\r\n\r\n//         <Card>\r\n//           <CardHeader className=\"pb-2\">\r\n//             <CardTitle className=\"text-lg flex items-center\">\r\n//               <Home className=\"mr-2 h-5 w-5 text-lysco-turquoise\" />\r\n//               Domiciliation\r\n//             </CardTitle>\r\n//           </CardHeader>\r\n//           <CardContent>\r\n//             <p className=\"text-sm text-gray-600 mb-4\">\r\n//               Statut: <span className={`font-medium ${domiciliation?.status === 'active' ? 'text-green-600' : 'text-amber-600'}`}>\r\n//                 {domiciliation?.status === 'active' ? 'Actif' : domiciliation?.status === 'pending' ? 'En attente' : 'Inactif'}\r\n//               </span>\r\n//             </p>\r\n//             <p className=\"text-sm text-gray-600 mb-4\">\r\n//               Adresse: {domiciliation?.address || 'Non définie'}\r\n//             </p>\r\n//             {domiciliation?.renewal_date && (\r\n//               <p className=\"text-sm text-gray-600 mb-4\">\r\n//                 Renouvellement: {formatDate(domiciliation.renewal_date)}\r\n//               </p>\r\n//             )}\r\n//             <p className=\"text-sm text-gray-600 mb-4\">\r\n//               Services actifs: <span className=\"font-medium\">{domiciliationServices.filter(s => s.status === 'active').length}</span>\r\n//             </p>\r\n//             <Button variant=\"outline\" size=\"sm\" className=\"w-full\" asChild>\r\n//               <a href=\"/dashboard/domiciliation\">Gérer la domiciliation</a>\r\n//             </Button>\r\n//           </CardContent>\r\n//         </Card>\r\n\r\n//         <Card>\r\n//           <CardHeader className=\"pb-2\">\r\n//             <CardTitle className=\"text-lg flex items-center\">\r\n//               <Mail className=\"mr-2 h-5 w-5 text-lysco-pink\" />\r\n//               Courrier\r\n//             </CardTitle>\r\n//           </CardHeader>\r\n//           <CardContent>\r\n//             <p className=\"text-sm text-gray-600 mb-4\">\r\n//               Nouveaux courriers: <span className=\"font-medium\">{mails.filter(mail => mail.status === 'new').length}</span>\r\n//             </p>\r\n//             {mails.length > 0 && (\r\n//               <p className=\"text-sm text-gray-600 mb-4\">\r\n//                 Dernière réception: <span className=\"font-medium\">\r\n//                   {formatDate(mails[0].received_at)}\r\n//                 </span>\r\n//               </p>\r\n//             )}\r\n//             <Button variant=\"outline\" size=\"sm\" className=\"w-full\" onClick={() => alert('Fonctionnalité à venir')}>\r\n//               Gérer le courrier\r\n//             </Button>\r\n//           </CardContent>\r\n//         </Card>\r\n\r\n//         <Card>\r\n//           <CardHeader className=\"pb-2\">\r\n//             <CardTitle className=\"text-lg flex items-center\">\r\n//               <Bell className=\"mr-2 h-5 w-5 text-lysco-turquoise\" />\r\n//               Notifications\r\n//             </CardTitle>\r\n//           </CardHeader>\r\n//           <CardContent>\r\n//             <p className=\"text-sm text-gray-600 mb-4\">\r\n//               Vous avez <span className=\"font-medium\">{notifications.filter(n => !n.read).length}</span> nouvelles notifications\r\n//             </p>\r\n//             <Button variant=\"outline\" size=\"sm\" className=\"w-full\" onClick={() => alert('Fonctionnalité à venir')}>\r\n//               Voir les notifications\r\n//             </Button>\r\n//           </CardContent>\r\n//         </Card>\r\n//       </div>\r\n\r\n//       <Card>\r\n//         <CardHeader>\r\n//           <CardTitle>Activité récente</CardTitle>\r\n//         </CardHeader>\r\n//         <CardContent>\r\n//           <div className=\"space-y-4\">\r\n//             {activities.map(activity => (\r\n//               <div key={activity.id} className=\"flex items-start gap-4 pb-4 border-b\">\r\n//                 <div className={`w-8 h-8 rounded-full ${\r\n//                   activity.type === 'mail' \r\n//                     ? 'bg-lysco-turquoise/10' \r\n//                     : activity.type === 'document' \r\n//                     ? 'bg-lysco-pink/10' \r\n//                     : 'bg-lysco-turquoise/10'\r\n//                 } flex items-center justify-center`}>\r\n//                   {activity.type === 'mail' && <Mail className=\"h-4 w-4 text-lysco-turquoise\" />}\r\n//                   {activity.type === 'document' && <FileText className=\"h-4 w-4 text-lysco-pink\" />}\r\n//                   {activity.type === 'message' && <MessageCircle className=\"h-4 w-4 text-lysco-turquoise\" />}\r\n//                 </div>\r\n//                 <div>\r\n//                   <p className=\"font-medium\">{activity.title}</p>\r\n//                   <p className=\"text-sm text-gray-600\">{activity.description}</p>\r\n//                   <p className=\"text-xs text-gray-500\">{getRelativeDate(activity.created_at)}, {format(new Date(activity.created_at), 'HH:mm')}</p>\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </CardContent>\r\n//       </Card>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default DashboardOverview;\r\n\r\n\r\n// src/components/dashboard/DashboardOverview.tsx\r\nimport React, { useState } from 'react'\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts'\r\nimport DatePicker from 'react-datepicker'\r\nimport { motion } from 'framer-motion'\r\nimport { fetchOverviewStats, Stat } from '@/integrations/api/dashboard'\r\n\r\nexport default function DashboardOverview() {\r\n  // plage par défaut : 7 derniers jours\r\n  const [startDate, setStartDate] = useState<Date>(\r\n    new Date(new Date().setDate(new Date().getDate() - 7))\r\n  )\r\n  const [endDate, setEndDate] = useState<Date>(new Date())\r\n\r\n  const {\r\n    data = [],\r\n    isLoading,\r\n    error,\r\n    refetch,\r\n  } = useQuery<Stat[]>(\r\n    ['overviewStats', startDate, endDate],\r\n    () => fetchOverviewStats(startDate, endDate),\r\n    {\r\n      refetchInterval: 1000 * 60 * 5, // toutes les 5 minutes\r\n      keepPreviousData: true,\r\n    }\r\n  )\r\n\r\n  if (isLoading) return <div>Chargement des statistiques…</div>\r\n  if (error) return <div>Impossible de charger les données.</div>\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.4 }}\r\n      className=\"space-y-6\"\r\n    >\r\n      {/* Filtres de date */}\r\n      <div className=\"flex items-center gap-4\">\r\n        <DatePicker\r\n          selected={startDate}\r\n          onChange={(date: Date) => {\r\n            setStartDate(date)\r\n            refetch()\r\n          }}\r\n          selectsStart\r\n          startDate={startDate}\r\n          endDate={endDate}\r\n          dateFormat=\"dd/MM/yyyy\"\r\n        />\r\n        <DatePicker\r\n          selected={endDate}\r\n          onChange={(date: Date) => {\r\n            setEndDate(date)\r\n            refetch()\r\n          }}\r\n          selectsEnd\r\n          startDate={startDate}\r\n          endDate={endDate}\r\n          minDate={startDate}\r\n          dateFormat=\"dd/MM/yyyy\"\r\n        />\r\n      </div>\r\n\r\n      {/* Graphique */}\r\n      <div className=\"w-full h-80\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <LineChart data={data}>\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"value\"\r\n              stroke=\"#2DD4BF\"\r\n              strokeWidth={2}\r\n              dot={{ r: 4 }}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </motion.div>\r\n  )\r\n}\r\n"
        }
    ]
}